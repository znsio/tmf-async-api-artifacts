{
  "asyncapi": "2.6.0",
  "servers": {},
  "info": {
    "title": "Resource Inventory Management",
    "description": "Resource Inventory  API goal is to provide the ability to manage Resources.\n### Operations\nResource Inventory API performs the following operations on the resources :\n- Retrieve an entity or a collection of entities depending on filter criteria\n- Partial update of an entity (including updating rules)\n- Create an entity (including default values and creation rules)\n- Delete an entity (for administration purposes)\n- Manage notification of events",
    "version": "5.0.0"
  },
  "tags": [
    {
      "name": "resource",
      "description": "Operations for Resource Resource"
    }
  ],
  "channels": {
    "{prefix}.resourceInventoryManagement.v5.listResource.commandRequest": {
      "publish": {
        "description": "List or find Resource objects",
        "operationId": "listResourceRequest",
        "summary": "List or find Resource objects",
        "message": {
          "$ref": "#/components/messages/ListResourceRequest"
        },
        "tags": [
          {
            "name": "resource"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.listResource.commandReply": {
      "subscribe": {
        "operationId": "listResourceReply",
        "tags": [
          {
            "name": "resource"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200ResourceArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.createResource.commandRequest": {
      "publish": {
        "description": "This operation creates a Resource entity.",
        "operationId": "createResourceRequest",
        "summary": "Creates a Resource",
        "message": {
          "$ref": "#/components/messages/CreateResourceJsonRequest"
        },
        "tags": [
          {
            "name": "resource"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.createResource.commandReply": {
      "subscribe": {
        "operationId": "createResourceReply",
        "tags": [
          {
            "name": "resource"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/201ResourceJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.retrieveResource.commandRequest": {
      "publish": {
        "description": "This operation retrieves a Resource entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveResourceRequest",
        "summary": "Retrieves a Resource by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveResourceRequest"
        },
        "tags": [
          {
            "name": "resource"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.retrieveResource.commandReply": {
      "subscribe": {
        "operationId": "retrieveResourceReply",
        "tags": [
          {
            "name": "resource"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200Resource_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.patchResource.commandRequest": {
      "publish": {
        "description": "This operation updates partially a Resource entity.",
        "operationId": "patchResourceRequest",
        "summary": "Updates partially a Resource",
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/PatchResourceJsonRequest"
            },
            {
              "$ref": "#/components/messages/PatchResourceMergePatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchResourceJsonPatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchResourceJsonPatchQueryRequest"
            }
          ]
        },
        "tags": [
          {
            "name": "resource"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.patchResource.commandReply": {
      "subscribe": {
        "operationId": "patchResourceReply",
        "tags": [
          {
            "name": "resource"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200Resource_PatchJsonReply"
            },
            {
              "$ref": "#/components/messages/200Resource_PatchMergePatchReply"
            },
            {
              "$ref": "#/components/messages/200Resource_PatchJsonPatchReply"
            },
            {
              "$ref": "#/components/messages/200Resource_PatchJsonPatchQueryReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.deleteResource.commandRequest": {
      "publish": {
        "description": "This operation deletes a Resource entity.",
        "operationId": "deleteResourceRequest",
        "summary": "Deletes a Resource",
        "message": {
          "$ref": "#/components/messages/DeleteResourceRequest"
        },
        "tags": [
          {
            "name": "resource"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.deleteResource.commandReply": {
      "subscribe": {
        "operationId": "deleteResourceReply",
        "tags": [
          {
            "name": "resource"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/204Reply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.resourceInventoryManagement.v5.resource.notificationEvent": {
      "subscribe": {
        "operationId": "resourceNotification",
        "tags": [
          {
            "name": "resource"
          }
        ],
        "message": {
          "$ref": "#/components/messages/ResourceNotification"
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Prefix": {
        "description": "The prefix.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "RequestHeaders": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CorrelationHeader"
          },
          {
            "properties": {
              "Reply-Channel": {
                "description": "Name of the channel to send the reply to.",
                "type": "string"
              }
            },
            "required": [
              "Reply-Channel"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CorrelationHeader": {
        "properties": {
          "X-Correlation-Id": {
            "description": "Correlation ID set by application",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "X-Correlation-Id"
        ],
        "type": "object"
      },
      "RequestChannel": {
        "properties": {
          "X-Request-Channel": {
            "description": "Channel on which the request was received",
            "type": "string"
          }
        },
        "required": [
          "X-Request-Channel"
        ],
        "type": "object"
      },
      "QueryFilters": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "QueryFiltersHeader": {
        "properties": {
          "Query-Filters": {
            "$ref": "#/components/schemas/QueryFilters"
          }
        },
        "type": "object"
      },
      "XTotalCountHeader": {
        "properties": {
          "X-Total-Count": {
            "type": "integer",
            "description": "Total number of items matching criteria"
          }
        },
        "type": "object"
      },
      "XResultCountHeader": {
        "properties": {
          "X-Result-Count": {
            "type": "integer",
            "description": "Actual number of items returned in the response body"
          }
        },
        "type": "object"
      },
      "IdParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Resource"
          }
        },
        "required": [
          "id"
        ]
      },
      "FieldsParameter": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Comma-separated properties to be provided in response"
          }
        }
      },
      "OffsetParameter": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response"
          }
        }
      },
      "LimitParameter": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Requested number of resources to be provided in response"
          }
        }
      },
      "ListResourceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          }
        ]
      },
      "ListResourceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListResourceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode200Header": {
        "properties": {
          "Status-Code": {
            "const": 200,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode400Header": {
        "properties": {
          "Status-Code": {
            "const": 400,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode401Header": {
        "properties": {
          "Status-Code": {
            "const": 401,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode403Header": {
        "properties": {
          "Status-Code": {
            "const": 403,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode404Header": {
        "properties": {
          "Status-Code": {
            "const": 404,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode405Header": {
        "properties": {
          "Status-Code": {
            "const": 405,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode500Header": {
        "properties": {
          "Status-Code": {
            "const": 500,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode501Header": {
        "properties": {
          "Status-Code": {
            "const": 501,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode503Header": {
        "properties": {
          "Status-Code": {
            "const": 503,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "CreateResourceRequestParameters": {
        "$ref": "#/components/schemas/FieldsParameter"
      },
      "CreateResourceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/CreateResourceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode201Header": {
        "properties": {
          "Status-Code": {
            "const": 201,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode409Header": {
        "properties": {
          "Status-Code": {
            "const": 409,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "RetrieveResourceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "RetrieveResourceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveResourceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "PatchResourceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "PatchResourceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/PatchResourceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "DeleteResourceRequestParameters": {
        "$ref": "#/components/schemas/IdParameter"
      },
      "DeleteResourceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/DeleteResourceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode204Header": {
        "properties": {
          "Status-Code": {
            "const": 204,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "Addressable": {
        "type": "object",
        "description": "Base schema for addressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        },
        "required": []
      },
      "Addressable_MVO": {
        "type": "object",
        "description": "Base schema for addressable entities"
      },
      "AttachmentRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object",
                "description": "The event linked to the involved resource object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_FVO"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_MVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "EntityRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            }
          }
        ]
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanation of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "description": "Collection of analytic characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "ExternalIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Feature": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "FeatureRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "FeatureRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "relationshipType",
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "FeatureRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "relationshipType",
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Feature_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship_FVO"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef_FVO"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Feature_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship_MVO"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef_MVO"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef_MVO": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "LogicalResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
            "properties": {
              "value": {
                "type": "string",
                "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
              }
            }
          }
        ]
      },
      "LogicalResource_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource_FVO"
          },
          {
            "type": "object",
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
            "properties": {
              "value": {
                "type": "string",
                "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
              }
            }
          }
        ]
      },
      "LogicalResource_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource_MVO"
          },
          {
            "type": "object",
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
            "properties": {
              "value": {
                "type": "string",
                "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
              }
            }
          }
        ]
      },
      "Note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": "afa9-3d90aaa8da0f"
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Note_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrderItemActionType": {
        "enum": [
          "add",
          "modify",
          "delete",
          "noChange"
        ],
        "type": "string",
        "description": "action to be performed on the product"
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRef_MVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PhysicalResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "type": "object",
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
            "properties": {
              "manufactureDate": {
                "type": "string",
                "format": "date-time",
                "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
              },
              "powerState": {
                "type": "string",
                "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
              },
              "serialNumber": {
                "type": "string",
                "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
              },
              "versionNumber": {
                "type": "string",
                "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
              }
            }
          }
        ]
      },
      "PhysicalResource_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource_FVO"
          },
          {
            "type": "object",
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
            "properties": {
              "manufactureDate": {
                "type": "string",
                "format": "date-time",
                "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
              },
              "powerState": {
                "type": "string",
                "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
              },
              "serialNumber": {
                "type": "string",
                "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
              },
              "versionNumber": {
                "type": "string",
                "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
              }
            }
          }
        ]
      },
      "PhysicalResource_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource_MVO"
          },
          {
            "type": "object",
            "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
            "properties": {
              "manufactureDate": {
                "type": "string",
                "format": "date-time",
                "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
              },
              "powerState": {
                "type": "string",
                "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
              },
              "serialNumber": {
                "type": "string",
                "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
              },
              "versionNumber": {
                "type": "string",
                "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
              }
            }
          }
        ]
      },
      "PlaceRef": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRef_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PolicyRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "PolicyRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "PolicyRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef_MVO"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRef class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRef class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRef"
              }
            },
            "required": [
              "role",
              "place"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRef class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRef_MVO"
              }
            },
            "required": [
              "role",
              "place"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedResourceOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedResourceOrderItem (a ResourceOrder item) .The resource order item which triggered resource creation/change/termination.",
            "properties": {
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "resourceOrderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "resourceOrderId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "itemAction": {
                "$ref": "#/components/schemas/OrderItemActionType"
              },
              "itemId": {
                "type": "string",
                "description": "Identifier of the order item where the resource was managed"
              },
              "role": {
                "type": "string",
                "description": "role of the resource order item for this resource"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedResourceOrderItem_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedResourceOrderItem (a ResourceOrder item) .The resource order item which triggered resource creation/change/termination.",
            "properties": {
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "resourceOrderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "resourceOrderId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "itemAction": {
                "$ref": "#/components/schemas/OrderItemActionType"
              },
              "itemId": {
                "type": "string",
                "description": "Identifier of the order item where the resource was managed"
              },
              "role": {
                "type": "string",
                "description": "role of the resource order item for this resource"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Resource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
            "properties": {
              "category": {
                "type": "string",
                "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
              },
              "description": {
                "type": "string",
                "description": "free-text description of the resource"
              },
              "name": {
                "type": "string",
                "description": "the name of the resource"
              },
              "endOperatingDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date till the resource is operating"
              },
              "administrativeState": {
                "$ref": "#/components/schemas/ResourceAdministrativeStateType"
              },
              "operationalState": {
                "$ref": "#/components/schemas/ResourceOperationalStateType"
              },
              "resourceStatus": {
                "$ref": "#/components/schemas/ResourceStatusType"
              },
              "usageState": {
                "$ref": "#/components/schemas/ResourceUsageStateType"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "resourceOrderItem": {
                "type": "array",
                "description": "A list of resource order items related to this resource",
                "items": {
                  "$ref": "#/components/schemas/RelatedResourceOrderItem"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRef"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "resourceRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRelationship"
                }
              },
              "resourceCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRef"
                }
              },
              "resourceSpecification": {
                "$ref": "#/components/schemas/ResourceSpecificationRef"
              },
              "startOperatingDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date from which the resource is operating"
              },
              "resourceVersion": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of a resource."
              },
              "activationFeature": {
                "description": "Configuration features",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feature"
                }
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRef"
              },
              "externalIdentifier": {
                "type": "array",
                "description": "An identification of this resource that is owned by or originates in a software system different from the current system. The structure identifies the system itself, the nature of the resource within the system and the unique ID of the resource within the system. It is anticipated that multiple external IDs can be held for a single resource, e.g. if the resource passed through multiple systems on the way to the current system.",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceAdministrativeStateType": {
        "enum": [
          "locked",
          "unlocked",
          "shutdown"
        ],
        "type": "string",
        "description": "ResourceAdministrativeStateType enumerations"
      },
      "ResourceAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ResourceAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ResourceAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ResourceAttributeValueChangeEventPayload generic structure",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          }
        }
      },
      "ResourceCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ResourceCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ResourceCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceCreateEventPayload": {
        "type": "object",
        "description": "ResourceCreateEventPayload generic structure",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          }
        }
      },
      "ResourceDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ResourceDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ResourceDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceDeleteEventPayload": {
        "type": "object",
        "description": "ResourceDeleteEventPayload generic structure",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          }
        }
      },
      "ResourceOperationalStateType": {
        "enum": [
          "enable",
          "disable"
        ],
        "type": "string",
        "description": "ResourceOperationalStateType enumerations"
      },
      "ResourceRef": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Resource entity and not the ResourceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "$ref": "#/components/schemas/ResourceRef"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Resource entity and not the ResourceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Resource_FVO"
          },
          {
            "$ref": "#/components/schemas/ResourceRef"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Resource entity and not the ResourceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Resource_MVO"
          },
          {
            "$ref": "#/components/schemas/ResourceRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRef_MVO": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Linked resources to the one instantiate, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (e.g. an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
            "properties": {
              "resourceRelationshipCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "resource": {
                "$ref": "#/components/schemas/ResourceRefOrValue"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of the resource relationship, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (eg: an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Linked resources to the one instantiate, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (e.g. an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
            "properties": {
              "resourceRelationshipCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "resource": {
                "$ref": "#/components/schemas/ResourceRefOrValue_FVO"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of the resource relationship, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (eg: an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
              }
            },
            "required": [
              "relationshipType",
              "resource"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Linked resources to the one instantiate, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (e.g. an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
            "properties": {
              "resourceRelationshipCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "resource": {
                "$ref": "#/components/schemas/ResourceRefOrValue_MVO"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of the resource relationship, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (eg: an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
              }
            },
            "required": [
              "relationshipType",
              "resource"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ResourceSpecificationRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Resource Specification version"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceSpecificationRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Resource Specification version"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ResourceStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ResourceStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceStateChangeEventPayload": {
        "type": "object",
        "description": "ResourceStateChangeEventPayload generic structure",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          }
        }
      },
      "ResourceStatusType": {
        "enum": [
          "alarm",
          "available",
          "installed",
          "not exists",
          "pendingRemoval",
          "planned",
          "reserved",
          "standby",
          "suspended",
          "unknown"
        ],
        "type": "string",
        "description": "ResourceStatusType enumerations"
      },
      "ResourceUsageStateType": {
        "enum": [
          "idle",
          "active",
          "busy"
        ],
        "type": "string",
        "description": "ResourceUsageStateType enumerations"
      },
      "Resource_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
            "properties": {
              "category": {
                "type": "string",
                "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
              },
              "description": {
                "type": "string",
                "description": "free-text description of the resource"
              },
              "name": {
                "type": "string",
                "description": "the name of the resource"
              },
              "endOperatingDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date till the resource is operating"
              },
              "administrativeState": {
                "$ref": "#/components/schemas/ResourceAdministrativeStateType"
              },
              "operationalState": {
                "$ref": "#/components/schemas/ResourceOperationalStateType"
              },
              "resourceStatus": {
                "$ref": "#/components/schemas/ResourceStatusType"
              },
              "usageState": {
                "$ref": "#/components/schemas/ResourceUsageStateType"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "resourceOrderItem": {
                "type": "array",
                "description": "A list of resource order items related to this resource",
                "items": {
                  "$ref": "#/components/schemas/RelatedResourceOrderItem"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRef_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "resourceRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRelationship_FVO"
                }
              },
              "resourceCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRef"
                }
              },
              "resourceSpecification": {
                "$ref": "#/components/schemas/ResourceSpecificationRef"
              },
              "startOperatingDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date from which the resource is operating"
              },
              "resourceVersion": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of a resource."
              },
              "activationFeature": {
                "description": "Configuration features",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feature_FVO"
                }
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRef"
              },
              "externalIdentifier": {
                "type": "array",
                "description": "An identification of this resource that is owned by or originates in a software system different from the current system. The structure identifies the system itself, the nature of the resource within the system and the unique ID of the resource within the system. It is anticipated that multiple external IDs can be held for a single resource, e.g. if the resource passed through multiple systems on the way to the current system.",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Resource_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
            "properties": {
              "category": {
                "type": "string",
                "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
              },
              "description": {
                "type": "string",
                "description": "free-text description of the resource"
              },
              "name": {
                "type": "string",
                "description": "the name of the resource"
              },
              "endOperatingDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date till the resource is operating"
              },
              "administrativeState": {
                "$ref": "#/components/schemas/ResourceAdministrativeStateType"
              },
              "operationalState": {
                "$ref": "#/components/schemas/ResourceOperationalStateType"
              },
              "resourceStatus": {
                "$ref": "#/components/schemas/ResourceStatusType"
              },
              "usageState": {
                "$ref": "#/components/schemas/ResourceUsageStateType"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              },
              "resourceOrderItem": {
                "type": "array",
                "description": "A list of resource order items related to this resource",
                "items": {
                  "$ref": "#/components/schemas/RelatedResourceOrderItem_MVO"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRef_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "resourceRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceRelationship_MVO"
                }
              },
              "resourceCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRef_MVO"
                }
              },
              "resourceSpecification": {
                "$ref": "#/components/schemas/ResourceSpecificationRef_MVO"
              },
              "startOperatingDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date from which the resource is operating"
              },
              "resourceVersion": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of a resource."
              },
              "activationFeature": {
                "description": "Configuration features",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Feature_MVO"
                }
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRef_MVO"
              },
              "externalIdentifier": {
                "type": "array",
                "description": "An identification of this resource that is owned by or originates in a software system different from the current system. The structure identifies the system itself, the nature of the resource within the system and the unique ID of the resource within the system. It is anticipated that multiple external IDs can be held for a single resource, e.g. if the resource passed through multiple systems on the way to the current system.",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "startDateTime": {
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "description": "End of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        }
      },
      "Error": {
        "discriminator": "@type",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      },
      "ResourceNotificationPayload": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ResourceAttributeValueChangeEvent"
          },
          {
            "$ref": "#/components/schemas/ResourceCreateEvent"
          },
          {
            "$ref": "#/components/schemas/ResourceDeleteEvent"
          },
          {
            "$ref": "#/components/schemas/ResourceStateChangeEvent"
          }
        ]
      }
    },
    "messages": {
      "ListResourceRequest": {
        "name": "ListResourceRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListResourceRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200ResourceArrayJsonReply": {
        "name": "200ResourceArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Resource"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "400JsonReply": {
        "name": "400JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode400Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "401JsonReply": {
        "name": "401JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode401Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "403JsonReply": {
        "name": "403JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode403Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "404JsonReply": {
        "name": "404JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode404Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "405JsonReply": {
        "name": "405JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode405Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "500JsonReply": {
        "name": "500JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode500Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "501JsonReply": {
        "name": "501JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode501Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "503JsonReply": {
        "name": "503JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode503Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "CreateResourceJsonRequest": {
        "name": "CreateResourceJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/Resource_FVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/CreateResourceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "201ResourceJsonReply": {
        "name": "201ResourceJsonReply",
        "payload": {
          "$ref": "#/components/schemas/Resource"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode201Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "409JsonReply": {
        "name": "409JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode409Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveResourceRequest": {
        "name": "RetrieveResourceRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveResourceRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200Resource_GetJsonReply": {
        "name": "200Resource_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/Resource"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchResourceJsonRequest": {
        "name": "PatchResourceJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/Resource_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchResourceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchResourceMergePatchRequest": {
        "name": "PatchResourceMergePatchRequest",
        "payload": {
          "$ref": "#/components/schemas/Resource_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchResourceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "PatchResourceJsonPatchRequest": {
        "name": "PatchResourceJsonPatchRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchResourceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "PatchResourceJsonPatchQueryRequest": {
        "name": "PatchResourceJsonPatchQueryRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchResourceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "200Resource_PatchJsonReply": {
        "name": "200Resource_PatchJsonReply",
        "payload": {
          "$ref": "#/components/schemas/Resource"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200Resource_PatchMergePatchReply": {
        "name": "200Resource_PatchMergePatchReply",
        "payload": {
          "$ref": "#/components/schemas/Resource"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "200Resource_PatchJsonPatchReply": {
        "name": "200Resource_PatchJsonPatchReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Resource"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "200Resource_PatchJsonPatchQueryReply": {
        "name": "200Resource_PatchJsonPatchQueryReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Resource"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "DeleteResourceRequest": {
        "name": "DeleteResourceRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/DeleteResourceRequestParametersHeader"
            }
          ]
        }
      },
      "204Reply": {
        "name": "204Reply",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode204Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        }
      },
      "ResourceNotification": {
        "name": "ResourceNotification",
        "payload": {
          "$ref": "#/components/schemas/ResourceNotificationPayload"
        }
      }
    }
  },
  "defaultContentType": "application/json"
}