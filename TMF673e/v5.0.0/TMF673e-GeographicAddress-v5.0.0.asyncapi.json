{
  "asyncapi": "2.6.0",
  "servers": {
    "kafkaServer": {
      "url": "kafka:9092",
      "protocol": "kafka",
      "description": "Kafka broker"
    }
  },
  "info": {
    "title": "GeographicAddress",
    "description": "The Geographic Address API provides a standardized client interface to an Address management system.\nIt allows looking for worldwide addresses.\nIt can also be used to validate geographic address data, to be sure that it corresponds to a real address.\n### Resources\n- GeographicAddress\n- GeographicSubAddress\n- GeographicAddressValidation\n- Hub\n### Operations\nGeographic Address Management API performs the following operations :\n- Retrieve a geographic address or a collection of geographic addresses\n- Create a geographic address\n- Update a geographic address\n- Retrieve a geographic sub-address\n- Create a geographic address validation\n- Retrieve, update and delete an existing  geographic address validation\n- Notify events on these resources",
    "version": "5.0.0"
  },
  "tags": [
    {
      "name": "geographicAddressValidation",
      "description": "Operations for GeographicAddressValidation Resource"
    },
    {
      "name": "geographicAddress",
      "description": "Operations for GeographicAddress Resource"
    },
    {
      "name": "geographicSubAddress",
      "description": "Operations for GeographicSubAddress Resource"
    }
  ],
  "channels": {
    "{prefix}.geographicAddress.v5.listGeographicAddress.commandRequest": {
      "publish": {
        "description": "List or find GeographicAddress objects",
        "operationId": "listGeographicAddressRequest",
        "summary": "List or find GeographicAddress objects",
        "message": {
          "$ref": "#/components/messages/ListGeographicAddressRequest"
        },
        "tags": [
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.listGeographicAddress.commandReply": {
      "subscribe": {
        "operationId": "listGeographicAddressReply",
        "tags": [
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicAddressArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.createGeographicAddress.commandRequest": {
      "publish": {
        "description": "This operation creates a GeographicAddress entity.",
        "operationId": "createGeographicAddressRequest",
        "summary": "Creates a GeographicAddress",
        "message": {
          "$ref": "#/components/messages/CreateGeographicAddressJsonRequest"
        },
        "tags": [
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.createGeographicAddress.commandReply": {
      "subscribe": {
        "operationId": "createGeographicAddressReply",
        "tags": [
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/201GeographicAddressJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.listGeographicAddressGeographicSubAddress.commandRequest": {
      "publish": {
        "description": "List or find GeographicSubAddress objects",
        "operationId": "listGeographicAddressGeographicSubAddressRequest",
        "summary": "List or find GeographicSubAddress objects",
        "message": {
          "$ref": "#/components/messages/ListGeographicAddressGeographicSubAddressRequest"
        },
        "tags": [
          {
            "name": "geographicSubAddress"
          },
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.listGeographicAddressGeographicSubAddress.commandReply": {
      "subscribe": {
        "operationId": "listGeographicAddressGeographicSubAddressReply",
        "tags": [
          {
            "name": "geographicSubAddress"
          },
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicSubAddressArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.retrieveGeographicAddressGeographicSubAddress.commandRequest": {
      "publish": {
        "description": "This operation retrieves a GeographicSubAddress entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveGeographicAddressGeographicSubAddressRequest",
        "summary": "Retrieves a GeographicSubAddress by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveGeographicAddressGeographicSubAddressRequest"
        },
        "tags": [
          {
            "name": "geographicSubAddress"
          },
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.retrieveGeographicAddressGeographicSubAddress.commandReply": {
      "subscribe": {
        "operationId": "retrieveGeographicAddressGeographicSubAddressReply",
        "tags": [
          {
            "name": "geographicSubAddress"
          },
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicSubAddress_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.retrieveGeographicAddress.commandRequest": {
      "publish": {
        "description": "This operation retrieves a GeographicAddress entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveGeographicAddressRequest",
        "summary": "Retrieves a GeographicAddress by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveGeographicAddressRequest"
        },
        "tags": [
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.retrieveGeographicAddress.commandReply": {
      "subscribe": {
        "operationId": "retrieveGeographicAddressReply",
        "tags": [
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicAddress_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.patchGeographicAddress.commandRequest": {
      "publish": {
        "description": "This operation updates partially a GeographicAddress entity.",
        "operationId": "patchGeographicAddressRequest",
        "summary": "Updates partially a GeographicAddress",
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/PatchGeographicAddressJsonRequest"
            },
            {
              "$ref": "#/components/messages/PatchGeographicAddressMergePatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchGeographicAddressJsonPatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchGeographicAddressJsonPatchQueryRequest"
            }
          ]
        },
        "tags": [
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.patchGeographicAddress.commandReply": {
      "subscribe": {
        "operationId": "patchGeographicAddressReply",
        "tags": [
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicAddress_PatchJsonReply"
            },
            {
              "$ref": "#/components/messages/200GeographicAddress_PatchMergePatchReply"
            },
            {
              "$ref": "#/components/messages/200GeographicAddress_PatchJsonPatchReply"
            },
            {
              "$ref": "#/components/messages/200GeographicAddress_PatchJsonPatchQueryReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.deleteGeographicAddress.commandRequest": {
      "publish": {
        "description": "This operation deletes a GeographicAddress entity.",
        "operationId": "deleteGeographicAddressRequest",
        "summary": "Deletes a GeographicAddress",
        "message": {
          "$ref": "#/components/messages/DeleteGeographicAddressRequest"
        },
        "tags": [
          {
            "name": "geographicAddress"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.deleteGeographicAddress.commandReply": {
      "subscribe": {
        "operationId": "deleteGeographicAddressReply",
        "tags": [
          {
            "name": "geographicAddress"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/204Reply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.listGeographicAddressValidation.commandRequest": {
      "publish": {
        "description": "List or find GeographicAddressValidation objects",
        "operationId": "listGeographicAddressValidationRequest",
        "summary": "List or find GeographicAddressValidation objects",
        "message": {
          "$ref": "#/components/messages/ListGeographicAddressValidationRequest"
        },
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.listGeographicAddressValidation.commandReply": {
      "subscribe": {
        "operationId": "listGeographicAddressValidationReply",
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicAddressValidationArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.createGeographicAddressValidation.commandRequest": {
      "publish": {
        "description": "This operation creates a GeographicAddressValidation entity.",
        "operationId": "createGeographicAddressValidationRequest",
        "summary": "Creates a GeographicAddressValidation",
        "message": {
          "$ref": "#/components/messages/CreateGeographicAddressValidationJsonRequest"
        },
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.createGeographicAddressValidation.commandReply": {
      "subscribe": {
        "operationId": "createGeographicAddressValidationReply",
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/201GeographicAddressValidationJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.retrieveGeographicAddressValidation.commandRequest": {
      "publish": {
        "description": "This operation retrieves a GeographicAddressValidation entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveGeographicAddressValidationRequest",
        "summary": "Retrieves a GeographicAddressValidation by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveGeographicAddressValidationRequest"
        },
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.retrieveGeographicAddressValidation.commandReply": {
      "subscribe": {
        "operationId": "retrieveGeographicAddressValidationReply",
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicAddressValidation_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.patchGeographicAddressValidation.commandRequest": {
      "publish": {
        "description": "This operation updates partially a GeographicAddressValidation entity.",
        "operationId": "patchGeographicAddressValidationRequest",
        "summary": "Updates partially a GeographicAddressValidation",
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/PatchGeographicAddressValidationJsonRequest"
            },
            {
              "$ref": "#/components/messages/PatchGeographicAddressValidationMergePatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchGeographicAddressValidationJsonPatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchGeographicAddressValidationJsonPatchQueryRequest"
            }
          ]
        },
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.patchGeographicAddressValidation.commandReply": {
      "subscribe": {
        "operationId": "patchGeographicAddressValidationReply",
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200GeographicAddressValidation_PatchJsonReply"
            },
            {
              "$ref": "#/components/messages/200GeographicAddressValidation_PatchMergePatchReply"
            },
            {
              "$ref": "#/components/messages/200GeographicAddressValidation_PatchJsonPatchReply"
            },
            {
              "$ref": "#/components/messages/200GeographicAddressValidation_PatchJsonPatchQueryReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.geographicAddress.v5.geographicAddressValidation.notificationEvent": {
      "subscribe": {
        "operationId": "geographicAddressValidationNotification",
        "tags": [
          {
            "name": "geographicAddressValidation"
          }
        ],
        "message": {
          "$ref": "#/components/messages/GeographicAddressValidationNotification"
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Prefix": {
        "description": "The prefix.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "RequestHeaders": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CorrelationHeader"
          },
          {
            "properties": {
              "Reply-Channel": {
                "description": "Name of the channel to send the reply to.",
                "type": "string"
              }
            },
            "required": [
              "Reply-Channel"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CorrelationHeader": {
        "properties": {
          "X-Correlation-Id": {
            "description": "Correlation ID set by application",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "X-Correlation-Id"
        ],
        "type": "object"
      },
      "RequestChannel": {
        "properties": {
          "X-Request-Channel": {
            "description": "Channel on which the request was received",
            "type": "string"
          }
        },
        "required": [
          "X-Request-Channel"
        ],
        "type": "object"
      },
      "QueryFilters": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "QueryFiltersHeader": {
        "properties": {
          "Query-Filters": {
            "$ref": "#/components/schemas/QueryFilters"
          }
        },
        "type": "object"
      },
      "XTotalCountHeader": {
        "properties": {
          "X-Total-Count": {
            "type": "integer",
            "description": "Total number of items matching criteria"
          }
        },
        "type": "object"
      },
      "XResultCountHeader": {
        "properties": {
          "X-Result-Count": {
            "type": "integer",
            "description": "Actual number of items returned in the response body"
          }
        },
        "type": "object"
      },
      "IdParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Resource"
          }
        },
        "required": [
          "id"
        ]
      },
      "FieldsParameter": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Comma-separated properties to be provided in response"
          }
        }
      },
      "OffsetParameter": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response"
          }
        }
      },
      "LimitParameter": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Requested number of resources to be provided in response"
          }
        }
      },
      "GeographicAddressIdParameter": {
        "type": "object",
        "properties": {
          "geographicAddressId": {
            "type": "string",
            "description": "Identifier of the GeographicAddress Resource"
          }
        },
        "required": [
          "geographicAddressId"
        ]
      },
      "ListGeographicAddressRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          }
        ]
      },
      "ListGeographicAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListGeographicAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode200Header": {
        "properties": {
          "Status-Code": {
            "const": 200,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode400Header": {
        "properties": {
          "Status-Code": {
            "const": 400,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode401Header": {
        "properties": {
          "Status-Code": {
            "const": 401,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode403Header": {
        "properties": {
          "Status-Code": {
            "const": 403,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode404Header": {
        "properties": {
          "Status-Code": {
            "const": 404,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode405Header": {
        "properties": {
          "Status-Code": {
            "const": 405,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode500Header": {
        "properties": {
          "Status-Code": {
            "const": 500,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode501Header": {
        "properties": {
          "Status-Code": {
            "const": 501,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode503Header": {
        "properties": {
          "Status-Code": {
            "const": 503,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "CreateGeographicAddressRequestParameters": {
        "$ref": "#/components/schemas/FieldsParameter"
      },
      "CreateGeographicAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/CreateGeographicAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode201Header": {
        "properties": {
          "Status-Code": {
            "const": 201,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode409Header": {
        "properties": {
          "Status-Code": {
            "const": 409,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "ListGeographicAddressGeographicSubAddressRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          },
          {
            "$ref": "#/components/schemas/GeographicAddressIdParameter"
          }
        ]
      },
      "ListGeographicAddressGeographicSubAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListGeographicAddressGeographicSubAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "RetrieveGeographicAddressGeographicSubAddressRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/GeographicAddressIdParameter"
          }
        ]
      },
      "RetrieveGeographicAddressGeographicSubAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveGeographicAddressGeographicSubAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "RetrieveGeographicAddressRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "RetrieveGeographicAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveGeographicAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "PatchGeographicAddressRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "PatchGeographicAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/PatchGeographicAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "DeleteGeographicAddressRequestParameters": {
        "$ref": "#/components/schemas/IdParameter"
      },
      "DeleteGeographicAddressRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/DeleteGeographicAddressRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode204Header": {
        "properties": {
          "Status-Code": {
            "const": 204,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "ListGeographicAddressValidationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          }
        ]
      },
      "ListGeographicAddressValidationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListGeographicAddressValidationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "CreateGeographicAddressValidationRequestParameters": {
        "$ref": "#/components/schemas/FieldsParameter"
      },
      "CreateGeographicAddressValidationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/CreateGeographicAddressValidationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "RetrieveGeographicAddressValidationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "RetrieveGeographicAddressValidationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveGeographicAddressValidationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "PatchGeographicAddressValidationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "PatchGeographicAddressValidationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/PatchGeographicAddressValidationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "Addressable": {
        "type": "object",
        "description": "Base schema for addressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        }
      },
      "Addressable_MVO": {
        "type": "object",
        "description": "Base schema for addressable entities"
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object",
                "description": "The event linked to the involved resource object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "EntityRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            }
          }
        ]
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanation of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "description": "Collection of analytic characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "ExternalIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicAddressAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddressAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "GeographicAddressAttributeValueChangeEventPayload generic structure",
        "properties": {
          "geographicAddress": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        }
      },
      "GeographicAddressCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddressCreateEventPayload": {
        "type": "object",
        "description": "GeographicAddressCreateEventPayload generic structure",
        "properties": {
          "geographicAddress": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        }
      },
      "GeographicAddressDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddressDeleteEventPayload": {
        "type": "object",
        "description": "GeographicAddressDeleteEventPayload generic structure",
        "properties": {
          "geographicAddress": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        }
      },
      "GeographicAddressValidation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "This resource is used to manage address validation request and response",
            "properties": {
              "href": {
                "type": "string",
                "description": "An URI used to access to the address validation resource"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the Address Validation"
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result."
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              },
              "validationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the address validation is performed"
              },
              "validationResult": {
                "type": "string",
                "description": "Result of the address validation (success, partial, fails)"
              },
              "submittedGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress"
              },
              "validGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress"
              },
              "alternateGeographicAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicAddress"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddressValidationStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "GeographicAddressValidationStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/GeographicAddressValidationStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddressValidationStateChangeEventPayload": {
        "type": "object",
        "description": "GeographicAddressValidationStateChangeEventPayload generic structure",
        "properties": {
          "geographicAddressValidation": {
            "$ref": "#/components/schemas/GeographicAddressValidation"
          }
        }
      },
      "GeographicAddressValidation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "This resource is used to manage address validation request and response",
            "properties": {
              "href": {
                "type": "string",
                "description": "An URI used to access to the address validation resource"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the Address Validation"
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result."
              },
              "submittedGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress_FVO"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "submittedGeographicAddress",
              "provideAlternative"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddressValidation_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "This resource is used to manage address validation request and response",
            "properties": {
              "provideAlternative": {
                "type": "boolean",
                "description": "Indicator provided by the requester to specify if alternate addresses must be provided in case of partial or fail result."
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              },
              "validationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the address validation is performed"
              },
              "validationResult": {
                "type": "string",
                "description": "Result of the address validation (success, partial, fails)"
              },
              "submittedGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress_MVO"
              },
              "validGeographicAddress": {
                "$ref": "#/components/schemas/GeographicAddress_MVO"
              },
              "alternateGeographicAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicAddress_MVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_FVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_FVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier_MVO"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_MVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_MVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the geographic location"
              },
              "href": {
                "type": "string",
                "description": "An URI used to access to the geographic location resource"
              },
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ]
      },
      "GeographicLocationRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the geographic location"
              },
              "href": {
                "type": "string",
                "description": "An URI used to access to the geographic location resource"
              },
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "@type"
            ]
          }
        ]
      },
      "GeographicLocation_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "GeographicSubAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            },
            "required": [
              "subUnitNumber",
              "subUnitType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_FVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_MVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Place": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "Place_FVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "Place_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StandardIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StandardIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TaskStateType": {
        "enum": [
          "acknowledged",
          "rejected",
          "inProgress",
          "cancelled",
          "done",
          "terminatedWithError"
        ],
        "type": "string",
        "description": "Possible values for the state of a task"
      },
      "Error": {
        "discriminator": "@type",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      },
      "GeographicAddressValidationNotificationPayload": {
        "$ref": "#/components/schemas/GeographicAddressValidationStateChangeEvent"
      }
    },
    "messages": {
      "ListGeographicAddressRequest": {
        "name": "ListGeographicAddressRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListGeographicAddressRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200GeographicAddressArrayJsonReply": {
        "name": "200GeographicAddressArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/GeographicAddress"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "400JsonReply": {
        "name": "400JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode400Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "401JsonReply": {
        "name": "401JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode401Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "403JsonReply": {
        "name": "403JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode403Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "404JsonReply": {
        "name": "404JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode404Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "405JsonReply": {
        "name": "405JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode405Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "500JsonReply": {
        "name": "500JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode500Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "501JsonReply": {
        "name": "501JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode501Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "503JsonReply": {
        "name": "503JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode503Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "CreateGeographicAddressJsonRequest": {
        "name": "CreateGeographicAddressJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress_FVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/CreateGeographicAddressRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "201GeographicAddressJsonReply": {
        "name": "201GeographicAddressJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode201Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "409JsonReply": {
        "name": "409JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode409Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "ListGeographicAddressGeographicSubAddressRequest": {
        "name": "ListGeographicAddressGeographicSubAddressRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListGeographicAddressGeographicSubAddressRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200GeographicSubAddressArrayJsonReply": {
        "name": "200GeographicSubAddressArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/GeographicSubAddress"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveGeographicAddressGeographicSubAddressRequest": {
        "name": "RetrieveGeographicAddressGeographicSubAddressRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveGeographicAddressGeographicSubAddressRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200GeographicSubAddress_GetJsonReply": {
        "name": "200GeographicSubAddress_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicSubAddress"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveGeographicAddressRequest": {
        "name": "RetrieveGeographicAddressRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveGeographicAddressRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200GeographicAddress_GetJsonReply": {
        "name": "200GeographicAddress_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchGeographicAddressJsonRequest": {
        "name": "PatchGeographicAddressJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchGeographicAddressMergePatchRequest": {
        "name": "PatchGeographicAddressMergePatchRequest",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "PatchGeographicAddressJsonPatchRequest": {
        "name": "PatchGeographicAddressJsonPatchRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "PatchGeographicAddressJsonPatchQueryRequest": {
        "name": "PatchGeographicAddressJsonPatchQueryRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "200GeographicAddress_PatchJsonReply": {
        "name": "200GeographicAddress_PatchJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200GeographicAddress_PatchMergePatchReply": {
        "name": "200GeographicAddress_PatchMergePatchReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddress"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "200GeographicAddress_PatchJsonPatchReply": {
        "name": "200GeographicAddress_PatchJsonPatchReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/GeographicAddress"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicAddress"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "200GeographicAddress_PatchJsonPatchQueryReply": {
        "name": "200GeographicAddress_PatchJsonPatchQueryReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/GeographicAddress"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicAddress"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "DeleteGeographicAddressRequest": {
        "name": "DeleteGeographicAddressRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/DeleteGeographicAddressRequestParametersHeader"
            }
          ]
        }
      },
      "204Reply": {
        "name": "204Reply",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode204Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        }
      },
      "ListGeographicAddressValidationRequest": {
        "name": "ListGeographicAddressValidationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListGeographicAddressValidationRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200GeographicAddressValidationArrayJsonReply": {
        "name": "200GeographicAddressValidationArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/GeographicAddressValidation"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "CreateGeographicAddressValidationJsonRequest": {
        "name": "CreateGeographicAddressValidationJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation_FVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/CreateGeographicAddressValidationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "201GeographicAddressValidationJsonReply": {
        "name": "201GeographicAddressValidationJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode201Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveGeographicAddressValidationRequest": {
        "name": "RetrieveGeographicAddressValidationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveGeographicAddressValidationRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200GeographicAddressValidation_GetJsonReply": {
        "name": "200GeographicAddressValidation_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchGeographicAddressValidationJsonRequest": {
        "name": "PatchGeographicAddressValidationJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressValidationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchGeographicAddressValidationMergePatchRequest": {
        "name": "PatchGeographicAddressValidationMergePatchRequest",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressValidationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "PatchGeographicAddressValidationJsonPatchRequest": {
        "name": "PatchGeographicAddressValidationJsonPatchRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressValidationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "PatchGeographicAddressValidationJsonPatchQueryRequest": {
        "name": "PatchGeographicAddressValidationJsonPatchQueryRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchGeographicAddressValidationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "200GeographicAddressValidation_PatchJsonReply": {
        "name": "200GeographicAddressValidation_PatchJsonReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200GeographicAddressValidation_PatchMergePatchReply": {
        "name": "200GeographicAddressValidation_PatchMergePatchReply",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidation"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "200GeographicAddressValidation_PatchJsonPatchReply": {
        "name": "200GeographicAddressValidation_PatchJsonPatchReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicAddressValidation"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "200GeographicAddressValidation_PatchJsonPatchQueryReply": {
        "name": "200GeographicAddressValidation_PatchJsonPatchQueryReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/GeographicAddressValidation"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeographicAddressValidation"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "GeographicAddressValidationNotification": {
        "name": "GeographicAddressValidationNotification",
        "payload": {
          "$ref": "#/components/schemas/GeographicAddressValidationNotificationPayload"
        }
      }
    }
  },
  "defaultContentType": "application/json"
}