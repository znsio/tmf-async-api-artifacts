{
  "asyncapi": "2.6.0",
  "servers": {},
  "info": {
    "title": "Product Offering Qualification",
    "description": "**TMF API Reference : TMF 679 - Product Offering Qualification** - January 2024\n\nProduct Offering Qualification API provides Product Offering commercial eligibility. This API features 2 distinct resources: CheckProductOfferingQualification  and QueryProductOfferingQualification \n\n**CheckProductOfferingQualification** allows to:\n- Request for a (or a set of)  productOffering and/or Product specification  (with configuration) commercial eligibility check. A CheckProductOfferingQualification is made of item (One item per product).\n- Provide a validation result for each item\n- Provide, if requested by the client side and if eligibility fails, an alternate productOffering and/or productSpecification\n- Provide in the response eligible productOffering if the request provided only product specification description.\n- Note: CheckProductOfferingQualification allows describing product from the inventory, so it is also possible to use it to retrieve productOffering available for a migration, to complete existing asset, or to check terminate operation eligibility.  In order to manage this UC, an action has to be provided for each item.\n\nIn a nutshell CheckProductOfferingQualification is for precise question/precise response\n\n**QueryProductOfferingQualification** allows to\n- look for productOffering eligibles from a context passed by search criteria structure\n- The response will provide a list of item - each item for a productOffering eligible\n\n\n In a nutshell QueryProductOfferingQualification is for 'vague 'request and get a list of available productOffering\n\n\n\n**QueryProductOfferingQualification and CheckProductOfferingQualification resources**\n\n\n These are 2 separate resources.\n\nBoth resources are following task-based pattern. They both leverage Task status lifecycle to monitor progress.\nFor both resources the API provided the following operations :\n- Retrieval of a QueryProductOfferingQualification/CheckProductOfferingQualification or a collection of QueryProductOfferingQualification/CheckProductOfferingQualification depending on filter criteria\n- Partial update of a QueryProductOfferingQualification or CheckProductOfferingQualification (including updating rules and for administration purpose)\n- Creation of a QueryProductOfferingQualification or CheckProductOfferingQualification (including default values and creation rules and for administration purpose). It should note that the API support 200 as 201 response as it is not striclty requested to save QueryProductOfferingQualification or CheckProductOfferingQualification. Indeed for instant sync qualification (qualification result provided in the respone)  it is possible to not provide  a GET operation to retrieve this resource later.\n- Deletion of a QueryProductOfferingQualification or CheckProductOfferingQualification  (for administration purposes)\n- Notification of events on QueryProductOfferingQualification and CheckProductOfferingQualification .  ",
    "version": "5.0.0"
  },
  "tags": [
    {
      "name": "checkProductOfferingQualification",
      "description": "Operations for CheckProductOfferingQualification Resource"
    },
    {
      "name": "queryProductOfferingQualification",
      "description": "Operations for QueryProductOfferingQualification Resource"
    }
  ],
  "channels": {
    "{prefix}.productOfferingQualification.v5.listCheckProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "List or find CheckProductOfferingQualification objects",
        "operationId": "listCheckProductOfferingQualificationRequest",
        "summary": "List or find CheckProductOfferingQualification objects",
        "message": {
          "$ref": "#/components/messages/ListCheckProductOfferingQualificationRequest"
        },
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.listCheckProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "listCheckProductOfferingQualificationReply",
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualificationArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.createCheckProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation creates a CheckProductOfferingQualification entity.",
        "operationId": "createCheckProductOfferingQualificationRequest",
        "summary": "Creates a CheckProductOfferingQualification",
        "message": {
          "$ref": "#/components/messages/CreateCheckProductOfferingQualificationJsonRequest"
        },
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.createCheckProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "createCheckProductOfferingQualificationReply",
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualification_TaskJsonReply"
            },
            {
              "$ref": "#/components/messages/201CheckProductOfferingQualificationJsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.retrieveCheckProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation retrieves a CheckProductOfferingQualification entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveCheckProductOfferingQualificationRequest",
        "summary": "Retrieves a CheckProductOfferingQualification by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveCheckProductOfferingQualificationRequest"
        },
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.retrieveCheckProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "retrieveCheckProductOfferingQualificationReply",
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualification_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.deleteCheckProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation deletes a CheckProductOfferingQualification entity.",
        "operationId": "deleteCheckProductOfferingQualificationRequest",
        "summary": "Deletes a CheckProductOfferingQualification",
        "message": {
          "$ref": "#/components/messages/DeleteCheckProductOfferingQualificationRequest"
        },
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.deleteCheckProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "deleteCheckProductOfferingQualificationReply",
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/204Reply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.patchCheckProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation updates partially a CheckProductOfferingQualification entity.",
        "operationId": "patchCheckProductOfferingQualificationRequest",
        "summary": "Updates partially a CheckProductOfferingQualification",
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/PatchCheckProductOfferingQualificationJsonRequest"
            },
            {
              "$ref": "#/components/messages/PatchCheckProductOfferingQualificationMergePatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchCheckProductOfferingQualificationJsonPatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchCheckProductOfferingQualificationJsonPatchQueryRequest"
            }
          ]
        },
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.patchCheckProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "patchCheckProductOfferingQualificationReply",
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualification_PatchJsonReply"
            },
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualification_PatchMergePatchReply"
            },
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualification_PatchJsonPatchReply"
            },
            {
              "$ref": "#/components/messages/200CheckProductOfferingQualification_PatchJsonPatchQueryReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.listQueryProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "List or find QueryProductOfferingQualification objects",
        "operationId": "listQueryProductOfferingQualificationRequest",
        "summary": "List or find QueryProductOfferingQualification objects",
        "message": {
          "$ref": "#/components/messages/ListQueryProductOfferingQualificationRequest"
        },
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.listQueryProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "listQueryProductOfferingQualificationReply",
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualificationArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.createQueryProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation creates a QueryProductOfferingQualification entity.",
        "operationId": "createQueryProductOfferingQualificationRequest",
        "summary": "Creates a QueryProductOfferingQualification",
        "message": {
          "$ref": "#/components/messages/CreateQueryProductOfferingQualificationJsonRequest"
        },
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.createQueryProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "createQueryProductOfferingQualificationReply",
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualification_TaskJsonReply"
            },
            {
              "$ref": "#/components/messages/201QueryProductOfferingQualificationJsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.retrieveQueryProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation retrieves a QueryProductOfferingQualification entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveQueryProductOfferingQualificationRequest",
        "summary": "Retrieves a QueryProductOfferingQualification by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveQueryProductOfferingQualificationRequest"
        },
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.retrieveQueryProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "retrieveQueryProductOfferingQualificationReply",
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualification_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.deleteQueryProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation deletes a QueryProductOfferingQualification entity.",
        "operationId": "deleteQueryProductOfferingQualificationRequest",
        "summary": "Deletes a QueryProductOfferingQualification",
        "message": {
          "$ref": "#/components/messages/DeleteQueryProductOfferingQualificationRequest"
        },
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.deleteQueryProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "deleteQueryProductOfferingQualificationReply",
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/204Reply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.patchQueryProductOfferingQualification.commandRequest": {
      "publish": {
        "description": "This operation updates partially a QueryProductOfferingQualification entity.",
        "operationId": "patchQueryProductOfferingQualificationRequest",
        "summary": "Updates partially a QueryProductOfferingQualification",
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/PatchQueryProductOfferingQualificationJsonRequest"
            },
            {
              "$ref": "#/components/messages/PatchQueryProductOfferingQualificationMergePatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchQueryProductOfferingQualificationJsonPatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchQueryProductOfferingQualificationJsonPatchQueryRequest"
            }
          ]
        },
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.patchQueryProductOfferingQualification.commandReply": {
      "subscribe": {
        "operationId": "patchQueryProductOfferingQualificationReply",
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualification_PatchJsonReply"
            },
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualification_PatchMergePatchReply"
            },
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualification_PatchJsonPatchReply"
            },
            {
              "$ref": "#/components/messages/200QueryProductOfferingQualification_PatchJsonPatchQueryReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.checkProductOfferingQualification.notificationEvent": {
      "subscribe": {
        "operationId": "checkProductOfferingQualificationNotification",
        "tags": [
          {
            "name": "checkProductOfferingQualification"
          }
        ],
        "message": {
          "$ref": "#/components/messages/CheckProductOfferingQualificationNotification"
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.productOfferingQualification.v5.queryProductOfferingQualification.notificationEvent": {
      "subscribe": {
        "operationId": "queryProductOfferingQualificationNotification",
        "tags": [
          {
            "name": "queryProductOfferingQualification"
          }
        ],
        "message": {
          "$ref": "#/components/messages/QueryProductOfferingQualificationNotification"
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Prefix": {
        "description": "The prefix.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "RequestHeaders": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CorrelationHeader"
          },
          {
            "properties": {
              "Reply-Channel": {
                "description": "Name of the channel to send the reply to.",
                "type": "string"
              }
            },
            "required": [
              "Reply-Channel"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CorrelationHeader": {
        "properties": {
          "X-Correlation-Id": {
            "description": "Correlation ID set by application",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "X-Correlation-Id"
        ],
        "type": "object"
      },
      "RequestChannel": {
        "properties": {
          "X-Request-Channel": {
            "description": "Channel on which the request was received",
            "type": "string"
          }
        },
        "required": [
          "X-Request-Channel"
        ],
        "type": "object"
      },
      "QueryFilters": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "QueryFiltersHeader": {
        "properties": {
          "Query-Filters": {
            "$ref": "#/components/schemas/QueryFilters"
          }
        },
        "type": "object"
      },
      "XTotalCountHeader": {
        "properties": {
          "X-Total-Count": {
            "type": "integer",
            "description": "Total number of items matching criteria"
          }
        },
        "type": "object"
      },
      "XResultCountHeader": {
        "properties": {
          "X-Result-Count": {
            "type": "integer",
            "description": "Actual number of items returned in the response body"
          }
        },
        "type": "object"
      },
      "IdParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Resource"
          }
        },
        "required": [
          "id"
        ]
      },
      "FieldsParameter": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Comma-separated properties to be provided in response"
          }
        }
      },
      "OffsetParameter": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response"
          }
        }
      },
      "LimitParameter": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Requested number of resources to be provided in response"
          }
        }
      },
      "ListCheckProductOfferingQualificationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          }
        ]
      },
      "ListCheckProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListCheckProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode200Header": {
        "properties": {
          "Status-Code": {
            "const": 200,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode400Header": {
        "properties": {
          "Status-Code": {
            "const": 400,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode401Header": {
        "properties": {
          "Status-Code": {
            "const": 401,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode403Header": {
        "properties": {
          "Status-Code": {
            "const": 403,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode404Header": {
        "properties": {
          "Status-Code": {
            "const": 404,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode405Header": {
        "properties": {
          "Status-Code": {
            "const": 405,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode500Header": {
        "properties": {
          "Status-Code": {
            "const": 500,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode501Header": {
        "properties": {
          "Status-Code": {
            "const": 501,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode503Header": {
        "properties": {
          "Status-Code": {
            "const": 503,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "CreateCheckProductOfferingQualificationRequestParameters": {
        "$ref": "#/components/schemas/FieldsParameter"
      },
      "CreateCheckProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/CreateCheckProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode201Header": {
        "properties": {
          "Status-Code": {
            "const": 201,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode409Header": {
        "properties": {
          "Status-Code": {
            "const": 409,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "RetrieveCheckProductOfferingQualificationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "RetrieveCheckProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveCheckProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "DeleteCheckProductOfferingQualificationRequestParameters": {
        "$ref": "#/components/schemas/IdParameter"
      },
      "DeleteCheckProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/DeleteCheckProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode204Header": {
        "properties": {
          "Status-Code": {
            "const": 204,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "PatchCheckProductOfferingQualificationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "PatchCheckProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/PatchCheckProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "ListQueryProductOfferingQualificationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          }
        ]
      },
      "ListQueryProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListQueryProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "CreateQueryProductOfferingQualificationRequestParameters": {
        "$ref": "#/components/schemas/FieldsParameter"
      },
      "CreateQueryProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/CreateQueryProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "RetrieveQueryProductOfferingQualificationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "RetrieveQueryProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveQueryProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "DeleteQueryProductOfferingQualificationRequestParameters": {
        "$ref": "#/components/schemas/IdParameter"
      },
      "DeleteQueryProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/DeleteQueryProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "PatchQueryProductOfferingQualificationRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "PatchQueryProductOfferingQualificationRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/PatchQueryProductOfferingQualificationRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "AccountRef": {
        "type": "object",
        "description": "Account reference. A account may be a party account or a financial account.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "AccountRef_MVO": {
        "type": "object",
        "description": "Account reference. A account may be a party account or a financial account.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Addressable": {
        "type": "object",
        "description": "Base schema for addressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        },
        "required": []
      },
      "AgreementItemRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "It's a Agreement item that has been executed previously.",
            "properties": {
              "agreementName": {
                "type": "string",
                "description": "Name of the related entity."
              },
              "agreementHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "agreementId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "agreementItemId": {
                "type": "string",
                "description": "Id of an item of a Agreement"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AgreementItemRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "It's a Agreement item that has been executed previously.",
            "properties": {
              "agreementName": {
                "type": "string",
                "description": "Name of the related entity."
              },
              "agreementHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "agreementId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "agreementItemId": {
                "type": "string",
                "description": "Id of an item of a Agreement"
              }
            },
            "required": [
              "agreementId",
              "agreementItemId"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "AgreementItemRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "It's a Agreement item that has been executed previously.",
            "properties": {
              "agreementName": {
                "type": "string",
                "description": "Name of the related entity."
              },
              "agreementHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "agreementId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "agreementItemId": {
                "type": "string",
                "description": "Id of an item of a Agreement"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AgreementRef": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "AgreementRef_MVO": {
        "type": "object",
        "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "AlternateProductOfferingProposal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Alternate product Offering proposal is used when the requested product offering is not available with characteristic and date asked for. An alternate proposal could be a distinct product offering or product Spec close to requested one or same as requested but with a different activation date.",
            "properties": {
              "alternateActivationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Alternate activation date in case seller is not able to meet requested expected activation date."
              },
              "alternateProduct": {
                "$ref": "#/components/schemas/ProductRefOrValue"
              },
              "alternateProductOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the AlternateProductOfferingProposal within its containing entity"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AlternateProductOfferingProposal_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Alternate product Offering proposal is used when the requested product offering is not available with characteristic and date asked for. An alternate proposal could be a distinct product offering or product Spec close to requested one or same as requested but with a different activation date.",
            "properties": {
              "alternateActivationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Alternate activation date in case seller is not able to meet requested expected activation date."
              },
              "alternateProduct": {
                "$ref": "#/components/schemas/ProductRefOrValue_FVO"
              },
              "alternateProductOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the AlternateProductOfferingProposal within its containing entity"
              }
            },
            "required": [
              "id",
              "alternateProductOffering"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "AlternateProductOfferingProposal_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Alternate product Offering proposal is used when the requested product offering is not available with characteristic and date asked for. An alternate proposal could be a distinct product offering or product Spec close to requested one or same as requested but with a different activation date.",
            "properties": {
              "alternateActivationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Alternate activation date in case seller is not able to meet requested expected activation date."
              },
              "alternateProduct": {
                "$ref": "#/components/schemas/ProductRefOrValue_MVO"
              },
              "alternateProductOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef_MVO"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef_MVO"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the AlternateProductOfferingProposal within its containing entity"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Attachment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef"
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_FVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef"
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_MVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Attachment_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            },
            "required": [
              "attachmentType",
              "mimeType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Attachment_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object",
                "description": "The event linked to the involved resource object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BillingAccountRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure.",
            "properties": {
              "ratingType": {
                "type": "string",
                "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BillingAccountRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure.",
            "properties": {
              "ratingType": {
                "type": "string",
                "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BooleanArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Boolean(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Boolean(s).",
                "items": {
                  "type": "boolean",
                  "description": "Characteristic item boolean value"
                }
              }
            }
          }
        ]
      },
      "BooleanArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Boolean(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Boolean(s).",
                "items": {
                  "type": "boolean",
                  "description": "Characteristic item boolean value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "BooleanArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Boolean(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Boolean(s).",
                "items": {
                  "type": "boolean",
                  "description": "Characteristic item boolean value"
                }
              }
            }
          }
        ]
      },
      "BooleanCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Boolean.",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "BooleanCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Boolean.",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "BooleanCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Boolean.",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "BusinessPartner": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "BusinessPartner_FVO": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "BusinessPartner_MVO": {
        "type": "object",
        "description": "When business partner is the BusinessPartner ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "CalendarPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Calendar period",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CalendarPeriod_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Calendar period",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "CalendarPeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Calendar period",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod_MVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CategoryRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to a category in the catalog.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the category"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CategoryRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to a category in the catalog.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the category"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ChannelRef": {
        "type": "object",
        "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ChannelRef_MVO": {
        "type": "object",
        "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_FVO"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_MVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualification is used to perform a commercial eligibility. It allows to request an eligibility check for a list of productOfferings (one per item). The response will provide qualification result depending on catalog rules and of the context of the interaction (defined be place, channel, party, product).",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "channel": {
                "$ref": "#/components/schemas/ChannelRef"
              },
              "description": {
                "type": "string",
                "description": "Description of the CheckProductOfferingQualification"
              },
              "effectiveQualificationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Effective date to CheckProductOfferingQualification completion"
              },
              "expectedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Expected Date from server side to provide an answer for the check qualification request"
              },
              "expirationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date the qualification response expires"
              },
              "instantSyncQualification": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
              },
              "note": {
                "type": "array",
                "description": "Free form text associated with the qualification request",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "checkProductOfferingQualificationItem": {
                "type": "array",
                "description": "Qualification item for a product or a category",
                "items": {
                  "$ref": "#/components/schemas/CheckProductOfferingQualificationItem"
                }
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided"
              },
              "provideOnlyAvailable": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that only available product offering must be listed in the response"
              },
              "provideResultReason": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that result reason are expected for available or not of product offering"
              },
              "qualificationResult": {
                "type": "string",
                "description": "Result of the qualification (example: green, yellow, red)"
              },
              "relatedParty": {
                "type": "array",
                "description": "Party playing a role for this qualification (as requester for example)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "requestedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline date when the requester expected a qualification answer"
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the CheckProductOfferingQualification was created"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualificationAttributeValueChange structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/CheckProductOfferingQualificationAttributeValueChangePayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationAttributeValueChangePayload": {
        "type": "object",
        "description": "CheckProductOfferingQualificationAttributeValueChangePayload generic structure",
        "properties": {
          "checkProductOfferingQualification": {
            "$ref": "#/components/schemas/CheckProductOfferingQualification"
          }
        }
      },
      "CheckProductOfferingQualificationCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualificationCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/CheckProductOfferingQualificationCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationCreateEventPayload": {
        "type": "object",
        "description": "CheckProductOfferingQualificationCreateEventPayload",
        "properties": {
          "checkProductOfferingQualification": {
            "$ref": "#/components/schemas/CheckProductOfferingQualification"
          }
        }
      },
      "CheckProductOfferingQualificationDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualificationDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/CheckProductOfferingQualificationDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationDeleteEventPayload": {
        "type": "object",
        "description": "CheckProductOfferingQualification Delete",
        "properties": {
          "checkProductOfferingQualification": {
            "$ref": "#/components/schemas/CheckProductOfferingQualification"
          }
        }
      },
      "CheckProductOfferingQualificationItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "expectedActivationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the requester look for productOfferingQualification activation"
              },
              "eligibilityResultReason": {
                "type": "array",
                "description": "Reason for understanding the eligibility result, whatever the result is (availability or unavailability).",
                "items": {
                  "$ref": "#/components/schemas/EligibilityResultReason"
                }
              },
              "qualificationItemRelationship": {
                "type": "array",
                "description": "Collecton of qualification item relationships",
                "items": {
                  "$ref": "#/components/schemas/ProductOfferingQualificationItemRelationship"
                }
              },
              "CheckProductOfferingQualificationItem": {
                "type": "array",
                "description": "A structure to embed check qualification item within check qualification item",
                "items": {
                  "$ref": "#/components/schemas/CheckProductOfferingQualificationItem"
                }
              },
              "note": {
                "type": "array",
                "description": "Collection of free form text associated with the qualification request ",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "product": {
                "$ref": "#/components/schemas/ProductRefOrValue"
              },
              "terminationError": {
                "type": "array",
                "description": "List of termination errors",
                "items": {
                  "$ref": "#/components/schemas/TerminationError"
                }
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef"
              },
              "alternateProductOfferingProposal": {
                "type": "array",
                "description": "Collection of alternate product offerings",
                "items": {
                  "$ref": "#/components/schemas/AlternateProductOfferingProposal"
                }
              },
              "action": {
                "type": "string",
                "description": "Action to be performed on a ProductOffering or product in order to be qualified(add, modify, remove, etc.)"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the CheckProductOfferingQualification item (generally it is a sequence number 01, 02, 03, ...)"
              },
              "qualificationItemResult": {
                "type": "string",
                "description": "Qualification result for this checkProductOfferingQualification item. It could be qualified (request productOffering or productSpecification are available), unqualified (requested not available and not alternate available), alternate (requested not available but alternate proposal available)"
              },
              "state": {
                "type": "string",
                "description": "State of the CheckProductOfferingQualification item : described in the state machine diagram"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationItem_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "expectedActivationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the requester look for productOfferingQualification activation"
              },
              "eligibilityResultReason": {
                "type": "array",
                "description": "Reason for understanding the eligibility result, whatever the result is (availability or unavailability).",
                "items": {
                  "$ref": "#/components/schemas/EligibilityResultReason_FVO"
                }
              },
              "qualificationItemRelationship": {
                "type": "array",
                "description": "Collecton of qualification item relationships",
                "items": {
                  "$ref": "#/components/schemas/ProductOfferingQualificationItemRelationship_FVO"
                }
              },
              "CheckProductOfferingQualificationItem": {
                "type": "array",
                "description": "A structure to embed check qualification item within check qualification item",
                "items": {
                  "$ref": "#/components/schemas/CheckProductOfferingQualificationItem_FVO"
                }
              },
              "note": {
                "type": "array",
                "description": "Collection of free form text associated with the qualification request ",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "product": {
                "$ref": "#/components/schemas/ProductRefOrValue_FVO"
              },
              "terminationError": {
                "type": "array",
                "description": "List of termination errors",
                "items": {
                  "$ref": "#/components/schemas/TerminationError"
                }
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef"
              },
              "alternateProductOfferingProposal": {
                "type": "array",
                "description": "Collection of alternate product offerings",
                "items": {
                  "$ref": "#/components/schemas/AlternateProductOfferingProposal_FVO"
                }
              },
              "action": {
                "type": "string",
                "description": "Action to be performed on a ProductOffering or product in order to be qualified(add, modify, remove, etc.)"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the CheckProductOfferingQualification item (generally it is a sequence number 01, 02, 03, ...)"
              },
              "qualificationItemResult": {
                "type": "string",
                "description": "Qualification result for this checkProductOfferingQualification item. It could be qualified (request productOffering or productSpecification are available), unqualified (requested not available and not alternate available), alternate (requested not available but alternate proposal available)"
              },
              "state": {
                "type": "string",
                "description": "State of the CheckProductOfferingQualification item : described in the state machine diagram"
              }
            },
            "required": [
              "action",
              "id",
              "qualificationItemResult",
              "state"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationItem_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "expectedActivationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the requester look for productOfferingQualification activation"
              },
              "eligibilityResultReason": {
                "type": "array",
                "description": "Reason for understanding the eligibility result, whatever the result is (availability or unavailability).",
                "items": {
                  "$ref": "#/components/schemas/EligibilityResultReason_MVO"
                }
              },
              "qualificationItemRelationship": {
                "type": "array",
                "description": "Collecton of qualification item relationships",
                "items": {
                  "$ref": "#/components/schemas/ProductOfferingQualificationItemRelationship_MVO"
                }
              },
              "CheckProductOfferingQualificationItem": {
                "type": "array",
                "description": "A structure to embed check qualification item within check qualification item",
                "items": {
                  "$ref": "#/components/schemas/CheckProductOfferingQualificationItem_MVO"
                }
              },
              "note": {
                "type": "array",
                "description": "Collection of free form text associated with the qualification request ",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              },
              "product": {
                "$ref": "#/components/schemas/ProductRefOrValue_MVO"
              },
              "terminationError": {
                "type": "array",
                "description": "List of termination errors",
                "items": {
                  "$ref": "#/components/schemas/TerminationError_MVO"
                }
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef_MVO"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef_MVO"
              },
              "alternateProductOfferingProposal": {
                "type": "array",
                "description": "Collection of alternate product offerings",
                "items": {
                  "$ref": "#/components/schemas/AlternateProductOfferingProposal_MVO"
                }
              },
              "action": {
                "type": "string",
                "description": "Action to be performed on a ProductOffering or product in order to be qualified(add, modify, remove, etc.)"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the CheckProductOfferingQualification item (generally it is a sequence number 01, 02, 03, ...)"
              },
              "qualificationItemResult": {
                "type": "string",
                "description": "Qualification result for this checkProductOfferingQualification item. It could be qualified (request productOffering or productSpecification are available), unqualified (requested not available and not alternate available), alternate (requested not available but alternate proposal available)"
              },
              "state": {
                "type": "string",
                "description": "State of the CheckProductOfferingQualification item : described in the state machine diagram"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualificationStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/CheckProductOfferingQualificationStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualificationStateChangeEventPayload": {
        "type": "object",
        "description": "CheckProductOfferingQualificationStateChangeEventPayload generic structure",
        "properties": {
          "checkProductOfferingQualification": {
            "$ref": "#/components/schemas/CheckProductOfferingQualification"
          }
        }
      },
      "CheckProductOfferingQualification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualification is used to perform a commercial eligibility. It allows to request an eligibility check for a list of productOfferings (one per item). The response will provide qualification result depending on catalog rules and of the context of the interaction (defined be place, channel, party, product).",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/ChannelRef"
              },
              "description": {
                "type": "string",
                "description": "Description of the CheckProductOfferingQualification"
              },
              "instantSyncQualification": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
              },
              "note": {
                "type": "array",
                "description": "Free form text associated with the qualification request",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "checkProductOfferingQualificationItem": {
                "type": "array",
                "description": "Qualification item for a product or a category",
                "items": {
                  "$ref": "#/components/schemas/CheckProductOfferingQualificationItem_FVO"
                }
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided"
              },
              "provideOnlyAvailable": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that only available product offering must be listed in the response"
              },
              "provideResultReason": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that result reason are expected for available or not of product offering"
              },
              "relatedParty": {
                "type": "array",
                "description": "Party playing a role for this qualification (as requester for example)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "requestedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline date when the requester expected a qualification answer"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CheckProductOfferingQualification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "CheckProductOfferingQualification is used to perform a commercial eligibility. It allows to request an eligibility check for a list of productOfferings (one per item). The response will provide qualification result depending on catalog rules and of the context of the interaction (defined be place, channel, party, product).",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/ChannelRef_MVO"
              },
              "description": {
                "type": "string",
                "description": "Description of the CheckProductOfferingQualification"
              },
              "effectiveQualificationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Effective date to CheckProductOfferingQualification completion"
              },
              "expectedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Expected Date from server side to provide an answer for the check qualification request"
              },
              "expirationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date the qualification response expires"
              },
              "instantSyncQualification": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
              },
              "note": {
                "type": "array",
                "description": "Free form text associated with the qualification request",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              },
              "checkProductOfferingQualificationItem": {
                "type": "array",
                "description": "Qualification item for a product or a category",
                "items": {
                  "$ref": "#/components/schemas/CheckProductOfferingQualificationItem_MVO"
                }
              },
              "provideAlternative": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that alternative solutions should be provided"
              },
              "provideOnlyAvailable": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that only available product offering must be listed in the response"
              },
              "provideResultReason": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that result reason are expected for available or not of product offering"
              },
              "qualificationResult": {
                "type": "string",
                "description": "Result of the qualification (example: green, yellow, red)"
              },
              "relatedParty": {
                "type": "array",
                "description": "Party playing a role for this qualification (as requester for example)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "requestedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline date when the requester expected a qualification answer"
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Consumer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Consumer_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Consumer_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "ContactMedium": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : EmailContactMedium, FaxContactMedium, PhoneContactMedium, GeographicAddressContactMedium, SocialMediaContactMedium...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualify it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ContactMedium_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Indicates the contact medium that could be used to contact the party. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : EmailContactMedium, FaxContactMedium, PhoneContactMedium, GeographicAddressContactMedium, SocialMediaContactMedium...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier for this contact medium."
              },
              "preferred": {
                "type": "boolean",
                "description": "If true, indicates that is the preferred contact medium"
              },
              "contactType": {
                "type": "string",
                "description": "Type of the contact medium to qualify it like pro email / personal email. This is not used to define the contact medium used."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CreditProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "format": "date-time",
                "description": "The date the profile was established"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CreditProfile_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
            "properties": {
              "creditProfileDate": {
                "type": "string",
                "format": "date-time",
                "description": "The date the profile was established"
              },
              "creditRiskRating": {
                "type": "integer",
                "description": "This is an integer whose value is used to rate the risk"
              },
              "creditScore": {
                "type": "integer",
                "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Disability": {
        "type": "object",
        "description": "Lack or inadequate strength or ability.",
        "properties": {
          "disabilityCode": {
            "type": "string",
            "description": "Code of the disability"
          },
          "disabilityName": {
            "type": "string",
            "description": "Name of the disability"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "Duration": {
        "type": "object",
        "description": "A time interval in a given unit of time",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Time interval (number of seconds, minutes, hours, etc.)"
          },
          "units": {
            "type": "string",
            "description": "Unit of time (seconds, minutes, hours, etc.)"
          }
        }
      },
      "EligibilityResultReason": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reason for understanding the eligibility result, whatever the result is (availability or unavailability).",
            "properties": {
              "label": {
                "type": "string",
                "description": "human readable result reason label"
              },
              "code": {
                "type": "string",
                "description": "Result reason code."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "EligibilityResultReason_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reason for understanding the eligibility result, whatever the result is (availability or unavailability).",
            "properties": {
              "label": {
                "type": "string",
                "description": "human readable result reason label"
              },
              "code": {
                "type": "string",
                "description": "Result reason code."
              }
            },
            "required": [
              "code"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "EligibilityResultReason_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reason for understanding the eligibility result, whatever the result is (availability or unavailability).",
            "properties": {
              "label": {
                "type": "string",
                "description": "human readable result reason label"
              },
              "code": {
                "type": "string",
                "description": "Result reason code."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "EntityRelationship": {
        "type": "object",
        "description": "A uni-directional relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        },
        "required": []
      },
      "EntityRelationship_FVO": {
        "type": "object",
        "description": "A uni-directional relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        },
        "required": [
          "relationshipType",
          "id",
          "@referredType",
          "@type"
        ]
      },
      "EntityRelationship_MVO": {
        "type": "object",
        "description": "A uni-directional relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        },
        "required": []
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanation of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "description": "Collection of analytic characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "ExternalIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_FVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_FVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier_MVO"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_MVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_MVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the geographic location"
              },
              "href": {
                "type": "string",
                "description": "An URI used to access to the geographic location resource"
              },
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ]
      },
      "GeographicLocationRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the geographic location"
              },
              "href": {
                "type": "string",
                "description": "An URI used to access to the geographic location resource"
              },
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "@type"
            ]
          }
        ]
      },
      "GeographicLocation_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the geographic location"
              },
              "href": {
                "type": "string",
                "description": "An URI used to access to the geographic location resource"
              },
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ]
      },
      "GeographicSite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "calendar": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue"
                }
              },
              "siteRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship"
                }
              }
            }
          }
        ]
      },
      "GeographicSiteRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "href": {
                "type": "string",
                "description": "Reference of the related geographic site"
              },
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the related site entity within the server"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSiteRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "href": {
                "type": "string",
                "description": "Reference of the related geographic site"
              },
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the related site entity within the server"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSiteRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "href": {
                "type": "string",
                "description": "Reference of the related geographic site"
              },
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the related site entity within the server"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSite_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "calendar": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_FVO"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue_FVO"
                }
              },
              "siteRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship_FVO"
                }
              }
            }
          }
        ]
      },
      "GeographicSite_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "calendar": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_MVO"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue_MVO"
                }
              },
              "siteRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship_MVO"
                }
              }
            }
          }
        ]
      },
      "GeographicSubAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            },
            "required": [
              "subUnitNumber",
              "subUnitType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_FVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_MVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "HourPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Hour interval",
            "properties": {
              "endHour": {
                "type": "string",
                "description": "The time when the status ends applying"
              },
              "startHour": {
                "type": "string",
                "description": "The time when the status starts applying"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "HourPeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Hour interval",
            "properties": {
              "endHour": {
                "type": "string",
                "description": "The time when the status ends applying"
              },
              "startHour": {
                "type": "string",
                "description": "The time when the status starts applying"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Individual": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time",
                "description": "Birth date"
              },
              "deathDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of death"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                },
                "description": "List of other names by which this individual is known"
              },
              "individualIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification"
                },
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number"
              },
              "disability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                },
                "description": "List of disabilities suffered by the individual"
              },
              "languageAbility": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                },
                "description": "List of national languages known by the individual"
              },
              "skill": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                },
                "description": "List of skills exhibited by the individual"
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            }
          }
        ]
      },
      "IndividualIdentification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier, such as: social security, town hall"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IndividualIdentification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier, such as: social security, town hall"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IndividualIdentification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate)",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier, such as: social security, town hall"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Identification type (passport, national identity card, drivers license, social security number, birth certificate)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IndividualStateType": {
        "enum": [
          "initialized",
          "validated",
          "deceased"
        ],
        "type": "string",
        "description": "Valid values for the lifecycle state of the individual"
      },
      "Individual_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time",
                "description": "Birth date"
              },
              "deathDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of death"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                },
                "description": "List of other names by which this individual is known"
              },
              "individualIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification_FVO"
                },
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number"
              },
              "disability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                },
                "description": "List of disabilities suffered by the individual"
              },
              "languageAbility": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                },
                "description": "List of national languages known by the individual"
              },
              "skill": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                },
                "description": "List of skills exhibited by the individual"
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            }
          }
        ]
      },
      "Individual_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "type": "object",
            "description": "Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.",
            "properties": {
              "gender": {
                "type": "string",
                "description": "Gender"
              },
              "placeOfBirth": {
                "type": "string",
                "description": "Reference to the place where the individual was born"
              },
              "countryOfBirth": {
                "type": "string",
                "description": "Country where the individual was born"
              },
              "nationality": {
                "type": "string",
                "description": "Nationality"
              },
              "maritalStatus": {
                "type": "string",
                "description": "Marital status (married, divorced, widow ...)"
              },
              "birthDate": {
                "type": "string",
                "format": "date-time",
                "description": "Birth date"
              },
              "deathDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date of death"
              },
              "title": {
                "type": "string",
                "description": "Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ..."
              },
              "aristocraticTitle": {
                "type": "string",
                "description": "e.g. Baron, Graf, Earl"
              },
              "generation": {
                "type": "string",
                "description": "e.g.. Sr, Jr, III (the third)"
              },
              "preferredGivenName": {
                "type": "string",
                "description": "Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
              },
              "familyNamePrefix": {
                "type": "string",
                "description": "Family name prefix"
              },
              "legalName": {
                "type": "string",
                "description": "Legal name or birth name (name one has for official purposes)"
              },
              "middleName": {
                "type": "string",
                "description": "Middles name or initial"
              },
              "name": {
                "type": "string",
                "description": "Full name flatten (first, middle, and last names) - this is the name that is expected to be presented in reference data types such as PartyRef, RelatedParty, etc. that refer to Individual"
              },
              "formattedName": {
                "type": "string",
                "description": "A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean)"
              },
              "location": {
                "type": "string",
                "description": "Temporary current location of the individual (may be used if the individual has approved its sharing)"
              },
              "status": {
                "$ref": "#/components/schemas/IndividualStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameIndividual"
                },
                "description": "List of other names by which this individual is known"
              },
              "individualIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IndividualIdentification_MVO"
                },
                "description": "List of official identifications issued to the individual, such as passport, driving licence, social security number"
              },
              "disability": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Disability"
                },
                "description": "List of disabilities suffered by the individual"
              },
              "languageAbility": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LanguageAbility"
                },
                "description": "List of national languages known by the individual"
              },
              "skill": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Skill"
                },
                "description": "List of skills exhibited by the individual"
              },
              "familyName": {
                "type": "string",
                "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
              },
              "givenName": {
                "type": "string",
                "description": "First name of the individual"
              }
            }
          }
        ]
      },
      "IntegerArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Integer(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Integer(s).",
                "items": {
                  "type": "integer",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "IntegerArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Integer(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Integer(s).",
                "items": {
                  "type": "integer",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "IntegerArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Integer(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Integer(s).",
                "items": {
                  "type": "integer",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "IntegerCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Integer.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "IntegerCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Integer.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "IntegerCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Integer.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "Intent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An Intent instance is the formal description of all expectations including requirements, goals, and constraints given to a technical system",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the intent."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether an intent represents a single intent (false), or a bundle of intents(true)."
              },
              "priority": {
                "type": "string",
                "description": "Can be used by intent owner to prioritize intents in an intent management system"
              },
              "statusChangeDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date that the entity status changed to the current one"
              },
              "context": {
                "type": "string",
                "description": "A string used to give a context to the intent"
              },
              "version": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of an intent."
              },
              "intentSpecification": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "intentRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityRelationship"
                },
                "description": "A list of intents related to this intent"
              },
              "characteristic": {
                "type": "array",
                "description": "Collection of characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue"
                },
                "description": "Attachments that may be of relevance to this intent, such as picture, document, media"
              },
              "name": {
                "type": "string",
                "description": "The name of the intent."
              },
              "expression": {
                "$ref": "#/components/schemas/IntentExpression"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the creation of this REST resource"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of this REST resource"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this intent"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An Intent expression",
            "properties": {
              "iri": {
                "type": "string",
                "description": "Internationalized Resource Identifier of the intent Expression"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentExpression_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An Intent expression",
            "properties": {
              "iri": {
                "type": "string",
                "description": "Internationalized Resource Identifier of the intent Expression"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRefOrValue": {
        "type": "object",
        "description": "Intent Ref (if Intent already exists) or Value (if Intent be created or its details be presented)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntentRef"
          },
          {
            "$ref": "#/components/schemas/Intent"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRefOrValue_FVO": {
        "type": "object",
        "description": "Intent Ref (if Intent already exists) or Value (if Intent be created or its details be presented)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntentRef"
          },
          {
            "$ref": "#/components/schemas/Intent_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRefOrValue_MVO": {
        "type": "object",
        "description": "Intent Ref (if Intent already exists) or Value (if Intent be created or its details be presented)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntentRef_MVO"
          },
          {
            "$ref": "#/components/schemas/Intent_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef_MVO": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Intent_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An Intent instance is the formal description of all expectations including requirements, goals, and constraints given to a technical system",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the intent."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether an intent represents a single intent (false), or a bundle of intents(true)."
              },
              "priority": {
                "type": "string",
                "description": "Can be used by intent owner to prioritize intents in an intent management system"
              },
              "statusChangeDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date that the entity status changed to the current one"
              },
              "context": {
                "type": "string",
                "description": "A string used to give a context to the intent"
              },
              "version": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of an intent."
              },
              "intentSpecification": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "intentRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityRelationship_FVO"
                },
                "description": "A list of intents related to this intent"
              },
              "characteristic": {
                "type": "array",
                "description": "Collection of characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
                },
                "description": "Attachments that may be of relevance to this intent, such as picture, document, media"
              },
              "name": {
                "type": "string",
                "description": "The name of the intent."
              },
              "expression": {
                "$ref": "#/components/schemas/IntentExpression"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the creation of this REST resource"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of this REST resource"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this intent"
              }
            },
            "required": [
              "name",
              "expression"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Intent_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An Intent instance is the formal description of all expectations including requirements, goals, and constraints given to a technical system",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the intent."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether an intent represents a single intent (false), or a bundle of intents(true)."
              },
              "priority": {
                "type": "string",
                "description": "Can be used by intent owner to prioritize intents in an intent management system"
              },
              "statusChangeDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date that the entity status changed to the current one"
              },
              "context": {
                "type": "string",
                "description": "A string used to give a context to the intent"
              },
              "version": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of an intent."
              },
              "intentSpecification": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "intentRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityRelationship_MVO"
                },
                "description": "A list of intents related to this intent"
              },
              "characteristic": {
                "type": "array",
                "description": "Collection of characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
                },
                "description": "Attachments that may be of relevance to this intent, such as picture, document, media"
              },
              "name": {
                "type": "string",
                "description": "The name of the intent."
              },
              "expression": {
                "$ref": "#/components/schemas/IntentExpression_MVO"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the creation of this REST resource"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of this REST resource"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this intent"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ItemActionType": {
        "enum": [
          "add",
          "modify",
          "delete",
          "noChange"
        ],
        "type": "string",
        "description": "action to be performed on the entity managed by the item"
      },
      "LanguageAbility": {
        "type": "object",
        "description": "Ability of an individual to understand or converse in a language.",
        "properties": {
          "languageCode": {
            "type": "string",
            "description": "Language code (RFC 5646)"
          },
          "languageName": {
            "type": "string",
            "description": "Language name"
          },
          "isFavouriteLanguage": {
            "type": "boolean",
            "description": "A \u201ctrue\u201d value specifies whether the language is considered by the individual as his favourite one"
          },
          "writingProficiency": {
            "type": "string",
            "description": "Writing proficiency evaluated for this language"
          },
          "readingProficiency": {
            "type": "string",
            "description": "Reading proficiency evaluated for this language"
          },
          "speakingProficiency": {
            "type": "string",
            "description": "Speaking proficiency evaluated for this language"
          },
          "listeningProficiency": {
            "type": "string",
            "description": "Listening proficiency evaluated for this language"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "Money": {
        "type": "object",
        "description": "A base / value business entity used to represent money",
        "properties": {
          "unit": {
            "type": "string",
            "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
          },
          "value": {
            "type": "number",
            "format": "float",
            "description": "A signed floating point number, the meaning of the sign is according to the context of the API that uses this Data type"
          }
        }
      },
      "Note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": "afa9-3d90aaa8da0f"
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Note_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": "afa9-3d90aaa8da0f"
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "NumberArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Number(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Number(s).",
                "items": {
                  "type": "number",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "NumberArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Number(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Number(s).",
                "items": {
                  "type": "number",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "NumberArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Number(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Number(s).",
                "items": {
                  "type": "number",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "NumberCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Number.",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "NumberCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Number.",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "NumberCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Number.",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "ObjectArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Object(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of characteristic values",
                "items": {
                  "type": "object",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "ObjectArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Object(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of characteristic values",
                "items": {
                  "type": "object",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "ObjectArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Object(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of characteristic values",
                "items": {
                  "type": "object",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "ObjectCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Object.",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "ObjectCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Object.",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "ObjectCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Object.",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "Organization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party"
          },
          {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization"
                },
                "description": "List of additional names by which the organization is known"
              },
              "organizationIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification"
                },
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies"
              },
              "organizationChildRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship"
                },
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts"
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            }
          }
        ]
      },
      "OrganizationChildRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Child references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationChildRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Child references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationIdentification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationIdentification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationIdentification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Represents our registration of information used as proof of identity by an organization",
            "properties": {
              "identificationId": {
                "type": "string",
                "description": "Identifier"
              },
              "issuingAuthority": {
                "type": "string",
                "description": "Authority which has issued the identifier (chamber of commerce...)"
              },
              "issuingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date at which the identifier was issued"
              },
              "identificationType": {
                "type": "string",
                "description": "Type of identification information used to identify the company in a country or internationally"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationParentRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Parent references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationParentRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Parent references of an organization in a structure of organizations.",
            "properties": {
              "relationshipType": {
                "type": "string",
                "description": "Type of the relationship. Could be juridical, hierarchical, geographical, functional for example."
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationRef_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "OrganizationStateType": {
        "enum": [
          "initialized",
          "validated",
          "closed"
        ],
        "type": "string",
        "description": "Valid values for the lifecycle state of the organization"
      },
      "Organization_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_FVO"
          },
          {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization"
                },
                "description": "List of additional names by which the organization is known"
              },
              "organizationIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification_FVO"
                },
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies"
              },
              "organizationChildRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship"
                },
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts"
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            }
          }
        ]
      },
      "Organization_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Party_MVO"
          },
          {
            "type": "object",
            "description": "Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.",
            "properties": {
              "isLegalEntity": {
                "type": "boolean",
                "description": "If value is true, the organization is a legal entity known by a national referential."
              },
              "isHeadOffice": {
                "type": "boolean",
                "description": "If value is true, the organization is the head office"
              },
              "organizationType": {
                "type": "string",
                "description": "Type of Organization (company, department...)"
              },
              "existsDuring": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "nameType": {
                "type": "string",
                "description": "Type of the name : Co, Inc, Ltd, etc."
              },
              "status": {
                "$ref": "#/components/schemas/OrganizationStateType"
              },
              "otherName": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OtherNameOrganization_MVO"
                },
                "description": "List of additional names by which the organization is known"
              },
              "organizationIdentification": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationIdentification_MVO"
                },
                "description": "List of official identifiers given to the organization, for example company number in the registry of companies"
              },
              "organizationChildRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationChildRelationship_MVO"
                },
                "description": "List of organizations that are contained within this organization. For example if this organization is the Legal Department, the child organizations might include Claims, Courts, Contracts"
              },
              "organizationParentRelationship": {
                "$ref": "#/components/schemas/OrganizationParentRelationship_MVO"
              },
              "tradingName": {
                "type": "string",
                "description": "Name that the organization (unit) trades under"
              }
            }
          }
        ]
      },
      "OtherNameIndividual": {
        "type": "object",
        "description": "Keeps track of other names, for example the old name of a woman before marriage or an artist name.",
        "properties": {
          "title": {
            "type": "string",
            "description": "Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,...."
          },
          "aristocraticTitle": {
            "type": "string",
            "description": "e.g. Baron, Graf, Earl, etc."
          },
          "generation": {
            "type": "string",
            "description": "e.g. Sr, Jr, etc."
          },
          "givenName": {
            "type": "string",
            "description": "First name"
          },
          "preferredGivenName": {
            "type": "string",
            "description": "Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname"
          },
          "familyNamePrefix": {
            "type": "string",
            "description": "Family name prefix"
          },
          "familyName": {
            "type": "string",
            "description": "Contains the non-chosen or inherited name. Also known as last name in the Western context"
          },
          "legalName": {
            "type": "string",
            "description": "Legal name or birth name (name one has for official purposes)"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name or initial"
          },
          "fullName": {
            "type": "string",
            "description": "Full name flatten (first, middle, and last names)"
          },
          "formattedName": {
            "type": "string",
            "description": ". A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean, etc.)"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "OtherNameOrganization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of an organization.",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "OtherNameOrganization_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Keeps track of other names, for example the old name of an organization.",
            "properties": {
              "tradingName": {
                "type": "string",
                "description": "The name that the organization trades under"
              },
              "nameType": {
                "type": "string",
                "description": "Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh"
              },
              "name": {
                "type": "string",
                "description": "Organization name (department name for example)"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Party": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Generic and Abstract Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
              "externalReference": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                },
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system"
              },
              "partyCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                },
                "description": "List of additional characteristics that a Party can take on."
              },
              "taxExemptionCertificate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate"
                },
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax"
              },
              "creditRating": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile"
                },
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                },
                "description": "List of parties and/or party roles related to this party"
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                },
                "description": "List of means for contacting the party, e.g. mobile phone, email address"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyCreditProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "format": "int32",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyCreditProfile_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency.",
            "properties": {
              "creditAgencyName": {
                "type": "string",
                "description": "Name of the credit agency giving the score"
              },
              "creditAgencyType": {
                "type": "string",
                "description": "Type of the credit agency giving the score"
              },
              "ratingReference": {
                "type": "string",
                "description": "Reference corresponding to the credit rating"
              },
              "ratingScore": {
                "type": "integer",
                "format": "int32",
                "description": "A measure of a party's creditworthiness calculated on the basis of a combination of factors such as their income and credit history"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyOrPartyRole": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          },
          {
            "$ref": "#/components/schemas/Individual"
          },
          {
            "$ref": "#/components/schemas/Organization"
          },
          {
            "$ref": "#/components/schemas/PartyRole"
          },
          {
            "$ref": "#/components/schemas/Supplier"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner"
          },
          {
            "$ref": "#/components/schemas/Consumer"
          },
          {
            "$ref": "#/components/schemas/Producer"
          }
        ],
        "discriminator": "@type"
      },
      "PartyOrPartyRole_FVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          },
          {
            "$ref": "#/components/schemas/Individual_FVO"
          },
          {
            "$ref": "#/components/schemas/Organization_FVO"
          },
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          },
          {
            "$ref": "#/components/schemas/Supplier_FVO"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner_FVO"
          },
          {
            "$ref": "#/components/schemas/Consumer_FVO"
          },
          {
            "$ref": "#/components/schemas/Producer_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyOrPartyRole_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          },
          {
            "$ref": "#/components/schemas/Individual_MVO"
          },
          {
            "$ref": "#/components/schemas/Organization_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          },
          {
            "$ref": "#/components/schemas/Supplier_MVO"
          },
          {
            "$ref": "#/components/schemas/BusinessPartner_MVO"
          },
          {
            "$ref": "#/components/schemas/Consumer_MVO"
          },
          {
            "$ref": "#/components/schemas/Producer_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRef_MVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The part played by a party in a given context.",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef"
              },
              "characteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                },
                "description": "Describes the characteristic of a party role."
              },
              "account": {
                "type": "array",
                "description": "Collection of accounts",
                "items": {
                  "$ref": "#/components/schemas/AccountRef"
                }
              },
              "agreement": {
                "type": "array",
                "description": "Collection of agreements",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef"
                }
              },
              "contactMedium": {
                "type": "array",
                "description": "Collection of contact mediums",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              },
              "paymentMethod": {
                "type": "array",
                "description": "Collection of payment methods",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef"
                }
              },
              "creditProfile": {
                "type": "array",
                "description": "Collection of credit profiles",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleSpecificationRef": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleSpecificationRef_MVO": {
        "type": "object",
        "description": "Party role specification reference. A party role specification gives additional details on the part played by a party in a given context.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRole_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The part played by a party in a given context.",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef"
              },
              "characteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                },
                "description": "Describes the characteristic of a party role."
              },
              "account": {
                "type": "array",
                "description": "Collection of accounts",
                "items": {
                  "$ref": "#/components/schemas/AccountRef"
                }
              },
              "agreement": {
                "type": "array",
                "description": "Collection of agreements",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef"
                }
              },
              "contactMedium": {
                "type": "array",
                "description": "Collection of contact mediums",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                }
              },
              "paymentMethod": {
                "type": "array",
                "description": "Collection of payment methods",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef"
                }
              },
              "creditProfile": {
                "type": "array",
                "description": "Collection of credit profiles",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "name",
              "engagedParty"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "PartyRole_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The part played by a party in a given context.",
            "properties": {
              "name": {
                "type": "string",
                "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles. It's the name of the PartyRole unique entity."
              },
              "description": {
                "type": "string",
                "description": "A description of the PartyRole."
              },
              "role": {
                "type": "string",
                "description": "Role played by the engagedParty in this context. As role is defined by partyRoleSpecification, this role attribute can be used to precise the role defined by partyRoleSpecification, or it can be used to define the role in case there is no partyRoleSpecification."
              },
              "engagedParty": {
                "$ref": "#/components/schemas/PartyRef_MVO"
              },
              "partyRoleSpecification": {
                "$ref": "#/components/schemas/PartyRoleSpecificationRef_MVO"
              },
              "characteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                },
                "description": "Describes the characteristic of a party role."
              },
              "account": {
                "type": "array",
                "description": "Collection of accounts",
                "items": {
                  "$ref": "#/components/schemas/AccountRef_MVO"
                }
              },
              "agreement": {
                "type": "array",
                "description": "Collection of agreements",
                "items": {
                  "$ref": "#/components/schemas/AgreementRef_MVO"
                }
              },
              "contactMedium": {
                "type": "array",
                "description": "Collection of contact mediums",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                }
              },
              "paymentMethod": {
                "type": "array",
                "description": "Collection of payment methods",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethodRef_MVO"
                }
              },
              "creditProfile": {
                "type": "array",
                "description": "Collection of credit profiles",
                "items": {
                  "$ref": "#/components/schemas/CreditProfile_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Used to track the lifecycle status of the party role."
              },
              "statusReason": {
                "type": "string",
                "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Party_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Generic and Abstract Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
              "externalReference": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                },
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system"
              },
              "partyCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                },
                "description": "List of additional characteristics that a Party can take on."
              },
              "taxExemptionCertificate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate_FVO"
                },
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax"
              },
              "creditRating": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile"
                },
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                },
                "description": "List of parties and/or party roles related to this party"
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium"
                },
                "description": "List of means for contacting the party, e.g. mobile phone, email address"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Party_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Generic and Abstract Party structure used to define commonalities between sub concepts of Individual and Organization.",
            "properties": {
              "externalReference": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                },
                "description": "List of identifiers of the Party in an external system, for example when party information is imported from a commerce system"
              },
              "partyCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                },
                "description": "List of additional characteristics that a Party can take on."
              },
              "taxExemptionCertificate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxExemptionCertificate_MVO"
                },
                "description": "List of tax exemptions granted to the party. For example, a war veteran might have partial exemption from state tax and a full exemption from federal tax"
              },
              "creditRating": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PartyCreditProfile_MVO"
                },
                "description": "List of credit profiles and scores for the party, typically received from an external credit broker"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                },
                "description": "List of parties and/or party roles related to this party"
              },
              "contactMedium": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactMedium_MVO"
                },
                "description": "List of means for contacting the party, e.g. mobile phone, email address"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PaymentMethodRef": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PaymentMethodRef_MVO": {
        "type": "object",
        "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Place": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRef": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicSite"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress"
          },
          {
            "$ref": "#/components/schemas/PlaceRef"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSite_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress_FVO"
          },
          {
            "$ref": "#/components/schemas/PlaceRef"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSite_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress_MVO"
          },
          {
            "$ref": "#/components/schemas/PlaceRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRef_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Place_FVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "Place_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "Price": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price and Price Alteration.",
            "properties": {
              "dutyFreeAmount": {
                "$ref": "#/components/schemas/Money"
              },
              "percentage": {
                "type": "number",
                "format": "float",
                "description": "Percentage to apply for ProdOfferPriceAlteration"
              },
              "taxIncludedAmount": {
                "$ref": "#/components/schemas/Money"
              },
              "taxRate": {
                "type": "number",
                "format": "float",
                "description": "Tax rate"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PriceAlteration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
            "properties": {
              "applicationDuration": {
                "type": "integer",
                "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains in detail the semantics of this order item price alteration"
              },
              "name": {
                "type": "string",
                "description": "Name of the order item price alteration"
              },
              "productOfferingPrice": {
                "$ref": "#/components/schemas/ProductOfferingPriceRef"
              },
              "priceType": {
                "type": "string",
                "description": "A category that describes the price such as recurring, one time and usage."
              },
              "priority": {
                "type": "integer",
                "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
              },
              "recurringChargePeriod": {
                "type": "string",
                "description": "Could be month, week..."
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "Could be minutes, GB..."
              },
              "price": {
                "$ref": "#/components/schemas/Price"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PriceAlteration_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
            "properties": {
              "applicationDuration": {
                "type": "integer",
                "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains in detail the semantics of this order item price alteration"
              },
              "name": {
                "type": "string",
                "description": "Name of the order item price alteration"
              },
              "productOfferingPrice": {
                "$ref": "#/components/schemas/ProductOfferingPriceRef"
              },
              "priceType": {
                "type": "string",
                "description": "A category that describes the price such as recurring, one time and usage."
              },
              "priority": {
                "type": "integer",
                "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
              },
              "recurringChargePeriod": {
                "type": "string",
                "description": "Could be month, week..."
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "Could be minutes, GB..."
              },
              "price": {
                "$ref": "#/components/schemas/Price"
              }
            },
            "required": [
              "priceType",
              "price"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "PriceAlteration_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
            "properties": {
              "applicationDuration": {
                "type": "integer",
                "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
              },
              "description": {
                "type": "string",
                "description": "A narrative that explains in detail the semantics of this order item price alteration"
              },
              "name": {
                "type": "string",
                "description": "Name of the order item price alteration"
              },
              "productOfferingPrice": {
                "$ref": "#/components/schemas/ProductOfferingPriceRef_MVO"
              },
              "priceType": {
                "type": "string",
                "description": "A category that describes the price such as recurring, one time and usage."
              },
              "priority": {
                "type": "integer",
                "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
              },
              "recurringChargePeriod": {
                "type": "string",
                "description": "Could be month, week..."
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "Could be minutes, GB..."
              },
              "price": {
                "$ref": "#/components/schemas/Price_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Price_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price and Price Alteration.",
            "properties": {
              "dutyFreeAmount": {
                "$ref": "#/components/schemas/Money"
              },
              "percentage": {
                "type": "number",
                "format": "float",
                "description": "Percentage to apply for ProdOfferPriceAlteration"
              },
              "taxIncludedAmount": {
                "$ref": "#/components/schemas/Money"
              },
              "taxRate": {
                "type": "number",
                "format": "float",
                "description": "Tax rate"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Producer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Producer_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Producer_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "Product": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).",
            "properties": {
              "agreementItem": {
                "type": "array",
                "description": "Collection of agreements",
                "items": {
                  "$ref": "#/components/schemas/AgreementItemRef"
                }
              },
              "billingAccount": {
                "$ref": "#/components/schemas/BillingAccountRef"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the product was created"
              },
              "description": {
                "type": "string",
                "description": "Is the description of the product. It could be copied from the description of the Product Offering."
              },
              "isBundle": {
                "type": "boolean",
                "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
              },
              "isCustomerVisible": {
                "type": "boolean",
                "description": "If true, the product is visible by the customer."
              },
              "name": {
                "type": "string",
                "description": "Name of the product. It could be the same as the name of the product offering"
              },
              "orderDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date when the product was ordered"
              },
              "productCharacteristic": {
                "type": "array",
                "description": "Collection of product characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "productOrderItem": {
                "type": "array",
                "description": "Collection of product order items",
                "items": {
                  "$ref": "#/components/schemas/RelatedOrderItem"
                }
              },
              "product": {
                "type": "array",
                "description": "Collection of products",
                "items": {
                  "$ref": "#/components/schemas/ProductRefOrValue"
                }
              },
              "productPrice": {
                "type": "array",
                "description": "Collection of product prices",
                "items": {
                  "$ref": "#/components/schemas/ProductPrice"
                }
              },
              "productRelationship": {
                "type": "array",
                "description": "Collection of product relationships",
                "items": {
                  "$ref": "#/components/schemas/ProductRelationship"
                }
              },
              "productSerialNumber": {
                "type": "string",
                "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
              },
              "productSpecification": {
                "$ref": "#/components/schemas/ProductSpecificationRef"
              },
              "productTerm": {
                "type": "array",
                "description": "Collection of product terms",
                "items": {
                  "$ref": "#/components/schemas/ProductTerm"
                }
              },
              "realizingResource": {
                "type": "array",
                "description": "Collection of realizing resources",
                "items": {
                  "$ref": "#/components/schemas/ResourceRef"
                }
              },
              "realizingService": {
                "type": "array",
                "description": "Collection of realizing services",
                "items": {
                  "$ref": "#/components/schemas/ServiceRef"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "place": {
                "type": "array",
                "description": "Collection of places",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                }
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date from which the product starts"
              },
              "status": {
                "$ref": "#/components/schemas/ProductStatusType"
              },
              "terminationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date when the product was terminated"
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingPriceRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product offering price"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingPriceRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product offering price"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingQualificationItemRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Structure used to describe relationship between productOfferingQualification item from the same ProductOfferingQualification.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the related POQ item (must be in the same POQ)"
              },
              "relationshipType": {
                "type": "string",
                "description": "Relationship type as relies on, bundles, etc..."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingQualificationItemRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Structure used to describe relationship between productOfferingQualification item from the same ProductOfferingQualification.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the related POQ item (must be in the same POQ)"
              },
              "relationshipType": {
                "type": "string",
                "description": "Relationship type as relies on, bundles, etc..."
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingQualificationItemRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Structure used to describe relationship between productOfferingQualification item from the same ProductOfferingQualification.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the related POQ item (must be in the same POQ)"
              },
              "relationshipType": {
                "type": "string",
                "description": "Relationship type as relies on, bundles, etc..."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product offering"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductOfferingRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product offering"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductPrice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Description of price and discount awarded",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the Product price"
              },
              "name": {
                "type": "string",
                "description": "Name of the Product price"
              },
              "productOfferingPrice": {
                "$ref": "#/components/schemas/ProductOfferingPriceRef"
              },
              "recurringChargePeriod": {
                "type": "string",
                "description": "Used for recurring charge to indicate period (month, week, etc..)."
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "Unit of Measure if price depending on it (Gb, SMS volume, etc..)"
              },
              "price": {
                "$ref": "#/components/schemas/Price"
              },
              "priceAlteration": {
                "type": "array",
                "description": "Collection of price changes",
                "items": {
                  "$ref": "#/components/schemas/PriceAlteration"
                }
              },
              "priceType": {
                "type": "string",
                "description": "indicate if the price is for recurrent or no-recurrent charge"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductPrice_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Description of price and discount awarded",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the Product price"
              },
              "name": {
                "type": "string",
                "description": "Name of the Product price"
              },
              "productOfferingPrice": {
                "$ref": "#/components/schemas/ProductOfferingPriceRef"
              },
              "recurringChargePeriod": {
                "type": "string",
                "description": "Used for recurring charge to indicate period (month, week, etc..)."
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "Unit of Measure if price depending on it (Gb, SMS volume, etc..)"
              },
              "price": {
                "$ref": "#/components/schemas/Price"
              },
              "priceAlteration": {
                "type": "array",
                "description": "Collection of price changes",
                "items": {
                  "$ref": "#/components/schemas/PriceAlteration_FVO"
                }
              },
              "priceType": {
                "type": "string",
                "description": "indicate if the price is for recurrent or no-recurrent charge"
              }
            },
            "required": [
              "priceType",
              "price"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ProductPrice_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Description of price and discount awarded",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the Product price"
              },
              "name": {
                "type": "string",
                "description": "Name of the Product price"
              },
              "productOfferingPrice": {
                "$ref": "#/components/schemas/ProductOfferingPriceRef_MVO"
              },
              "recurringChargePeriod": {
                "type": "string",
                "description": "Used for recurring charge to indicate period (month, week, etc..)."
              },
              "unitOfMeasure": {
                "type": "string",
                "description": "Unit of Measure if price depending on it (Gb, SMS volume, etc..)"
              },
              "price": {
                "$ref": "#/components/schemas/Price_MVO"
              },
              "priceAlteration": {
                "type": "array",
                "description": "Collection of price changes",
                "items": {
                  "$ref": "#/components/schemas/PriceAlteration_MVO"
                }
              },
              "priceType": {
                "type": "string",
                "description": "indicate if the price is for recurrent or no-recurrent charge"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductRef": {
        "type": "object",
        "description": "A Product reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ProductRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Product entity and not the ProductRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Product"
          },
          {
            "$ref": "#/components/schemas/ProductRef"
          }
        ],
        "discriminator": "@type"
      },
      "ProductRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Product entity and not the ProductRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Product_FVO"
          },
          {
            "$ref": "#/components/schemas/ProductRef"
          }
        ],
        "discriminator": "@type"
      },
      "ProductRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Product entity and not the ProductRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Product_MVO"
          },
          {
            "$ref": "#/components/schemas/ProductRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "ProductRef_MVO": {
        "type": "object",
        "description": "A Product reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ProductRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Used to describe relationship between product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the related product"
              },
              "relationshipType": {
                "type": "string",
                "description": "Relationship type as relies on, bundles, etc..."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Used to describe relationship between product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the related product"
              },
              "relationshipType": {
                "type": "string",
                "description": "Relationship type as relies on, bundles, etc..."
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ProductRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Used to describe relationship between product.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the related product"
              },
              "relationshipType": {
                "type": "string",
                "description": "Relationship type as relies on, bundles, etc..."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductSpecificationRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductSpecification reference. A product Specification represents entities that are orderable from the provider of the catalog.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product specification"
              },
              "targetProductSchema": {
                "$ref": "#/components/schemas/TargetProductSchema"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductSpecificationRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductSpecification reference. A product Specification represents entities that are orderable from the provider of the catalog.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product specification"
              },
              "targetProductSchema": {
                "$ref": "#/components/schemas/TargetProductSchema_FVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductSpecificationRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "ProductSpecification reference. A product Specification represents entities that are orderable from the provider of the catalog.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Version of the product specification"
              },
              "targetProductSchema": {
                "$ref": "#/components/schemas/TargetProductSchema_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductStatusType": {
        "enum": [
          "created",
          "pendingActive",
          "cancelled",
          "active",
          "pendingTerminate",
          "terminated",
          "suspended",
          "aborted "
        ],
        "type": "string",
        "description": "Possible values for the status of the product"
      },
      "ProductTerm": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Description of a productTerm linked to this product. This represent a commitment with a duration",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the productTerm"
              },
              "duration": {
                "$ref": "#/components/schemas/Duration"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Name of the productTerm",
                "example": "12months commitment"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ProductTerm_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Description of a productTerm linked to this product. This represent a commitment with a duration",
            "properties": {
              "description": {
                "type": "string",
                "description": "Description of the productTerm"
              },
              "duration": {
                "$ref": "#/components/schemas/Duration"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "name": {
                "type": "string",
                "description": "Name of the productTerm",
                "example": "12months commitment"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Product_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).",
            "properties": {
              "agreementItem": {
                "type": "array",
                "description": "Collection of agreements",
                "items": {
                  "$ref": "#/components/schemas/AgreementItemRef_FVO"
                }
              },
              "billingAccount": {
                "$ref": "#/components/schemas/BillingAccountRef"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the product was created"
              },
              "description": {
                "type": "string",
                "description": "Is the description of the product. It could be copied from the description of the Product Offering."
              },
              "isBundle": {
                "type": "boolean",
                "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
              },
              "isCustomerVisible": {
                "type": "boolean",
                "description": "If true, the product is visible by the customer."
              },
              "name": {
                "type": "string",
                "description": "Name of the product. It could be the same as the name of the product offering"
              },
              "orderDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date when the product was ordered"
              },
              "productCharacteristic": {
                "type": "array",
                "description": "Collection of product characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "productOrderItem": {
                "type": "array",
                "description": "Collection of product order items",
                "items": {
                  "$ref": "#/components/schemas/RelatedOrderItem_FVO"
                }
              },
              "product": {
                "type": "array",
                "description": "Collection of products",
                "items": {
                  "$ref": "#/components/schemas/ProductRefOrValue_FVO"
                }
              },
              "productPrice": {
                "type": "array",
                "description": "Collection of product prices",
                "items": {
                  "$ref": "#/components/schemas/ProductPrice_FVO"
                }
              },
              "productRelationship": {
                "type": "array",
                "description": "Collection of product relationships",
                "items": {
                  "$ref": "#/components/schemas/ProductRelationship_FVO"
                }
              },
              "productSerialNumber": {
                "type": "string",
                "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
              },
              "productSpecification": {
                "$ref": "#/components/schemas/ProductSpecificationRef_FVO"
              },
              "productTerm": {
                "type": "array",
                "description": "Collection of product terms",
                "items": {
                  "$ref": "#/components/schemas/ProductTerm"
                }
              },
              "realizingResource": {
                "type": "array",
                "description": "Collection of realizing resources",
                "items": {
                  "$ref": "#/components/schemas/ResourceRef"
                }
              },
              "realizingService": {
                "type": "array",
                "description": "Collection of realizing services",
                "items": {
                  "$ref": "#/components/schemas/ServiceRef"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "place": {
                "type": "array",
                "description": "Collection of places",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRefOrValue_FVO"
                }
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date from which the product starts"
              },
              "status": {
                "$ref": "#/components/schemas/ProductStatusType"
              },
              "terminationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date when the product was terminated"
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Product_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).",
            "properties": {
              "agreementItem": {
                "type": "array",
                "description": "Collection of agreements",
                "items": {
                  "$ref": "#/components/schemas/AgreementItemRef_MVO"
                }
              },
              "billingAccount": {
                "$ref": "#/components/schemas/BillingAccountRef_MVO"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the product was created"
              },
              "description": {
                "type": "string",
                "description": "Is the description of the product. It could be copied from the description of the Product Offering."
              },
              "isBundle": {
                "type": "boolean",
                "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
              },
              "isCustomerVisible": {
                "type": "boolean",
                "description": "If true, the product is visible by the customer."
              },
              "name": {
                "type": "string",
                "description": "Name of the product. It could be the same as the name of the product offering"
              },
              "orderDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date when the product was ordered"
              },
              "productCharacteristic": {
                "type": "array",
                "description": "Collection of product characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef_MVO"
              },
              "productOrderItem": {
                "type": "array",
                "description": "Collection of product order items",
                "items": {
                  "$ref": "#/components/schemas/RelatedOrderItem_MVO"
                }
              },
              "product": {
                "type": "array",
                "description": "Collection of products",
                "items": {
                  "$ref": "#/components/schemas/ProductRefOrValue_MVO"
                }
              },
              "productPrice": {
                "type": "array",
                "description": "Collection of product prices",
                "items": {
                  "$ref": "#/components/schemas/ProductPrice_MVO"
                }
              },
              "productRelationship": {
                "type": "array",
                "description": "Collection of product relationships",
                "items": {
                  "$ref": "#/components/schemas/ProductRelationship_MVO"
                }
              },
              "productSerialNumber": {
                "type": "string",
                "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
              },
              "productSpecification": {
                "$ref": "#/components/schemas/ProductSpecificationRef_MVO"
              },
              "productTerm": {
                "type": "array",
                "description": "Collection of product terms",
                "items": {
                  "$ref": "#/components/schemas/ProductTerm_MVO"
                }
              },
              "realizingResource": {
                "type": "array",
                "description": "Collection of realizing resources",
                "items": {
                  "$ref": "#/components/schemas/ResourceRef_MVO"
                }
              },
              "realizingService": {
                "type": "array",
                "description": "Collection of realizing services",
                "items": {
                  "$ref": "#/components/schemas/ServiceRef_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "place": {
                "type": "array",
                "description": "Collection of places",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRefOrValue_MVO"
                }
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date from which the product starts"
              },
              "status": {
                "$ref": "#/components/schemas/ProductStatusType"
              },
              "terminationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Is the date when the product was terminated"
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PromotionRef": {
        "type": "object",
        "description": "Promotion reference. Promotion Resource is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PromotionRef_MVO": {
        "type": "object",
        "description": "Promotion reference. Promotion Resource is used to provide the additional discount, voucher, bonus or gift to the customer who meets the pre-defined criteria. Using promotion, the enterprise is able to attract the users and encourage more consumption, especially continuous purchases.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Quantity": {
        "type": "object",
        "description": "An amount in a given unit",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float",
            "default": 1,
            "description": "Numeric value in a given unit"
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        }
      },
      "QueryProductOfferingQualification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualification is used to perform a commercial eligibility. It allows client side to pass a list of criteria (search criteria to provide the context of the qualification) and in the response the seller send (if any) a list of product offering qualified.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "channel": {
                "$ref": "#/components/schemas/ChannelRef"
              },
              "category": {
                "$ref": "#/components/schemas/CategoryRef"
              },
              "description": {
                "type": "string",
                "description": "Description of the QueryProductOfferingQualification"
              },
              "effectiveQualificationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Effective date to QueryProductOfferingQualification completion"
              },
              "expectedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Expected date rom the server to provide an answer for the query qualification request"
              },
              "expirationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date the qualification response expires"
              },
              "instantSyncQualification": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
              },
              "note": {
                "type": "array",
                "description": "Free form text associated with the qualification request",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "qualifiedProductOfferingItem": {
                "type": "array",
                "description": "Qualification item for a product or a category",
                "items": {
                  "$ref": "#/components/schemas/QueryProductOfferingQualificationItem"
                }
              },
              "searchCriteria": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationItem"
              },
              "relatedParty": {
                "type": "array",
                "description": "Party playing a role for this qualification (as requester for example)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole"
                }
              },
              "requestedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline date when the requester expected a qualification answer"
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the QueryProductOfferingQualification was created"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": []
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualificationAttributeValueChange structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationAttributeValueChangePayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationAttributeValueChangePayload": {
        "type": "object",
        "description": "QueryProductOfferingQualificationAttributeValueChangePayload generic structure",
        "properties": {
          "queryProductOfferingQualification": {
            "$ref": "#/components/schemas/QueryProductOfferingQualification"
          }
        }
      },
      "QueryProductOfferingQualificationCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualificationCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationCreateEventPayload": {
        "type": "object",
        "description": "QueryProductOfferingQualificationCreateEventPayload",
        "properties": {
          "queryProductOfferingQualification": {
            "$ref": "#/components/schemas/QueryProductOfferingQualification"
          }
        }
      },
      "QueryProductOfferingQualificationDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualificationDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationDeleteEventPayload": {
        "type": "object",
        "description": "QueryProductOfferingQualification Delete event",
        "properties": {
          "queryProductOfferingQualification": {
            "$ref": "#/components/schemas/QueryProductOfferingQualification"
          }
        }
      },
      "QueryProductOfferingQualificationItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "qualificationItemRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductOfferingQualificationItemRelationship"
                }
              },
              "product": {
                "$ref": "#/components/schemas/ProductRefOrValue"
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the ProductOfferingQualification item (generally it is a sequence number 01, 02, 03, ...)"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationItem_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "qualificationItemRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductOfferingQualificationItemRelationship_FVO"
                }
              },
              "product": {
                "$ref": "#/components/schemas/ProductRefOrValue"
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the ProductOfferingQualification item (generally it is a sequence number 01, 02, 03, ...)"
              }
            },
            "required": [
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationItem_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "qualificationItemRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductOfferingQualificationItemRelationship_MVO"
                }
              },
              "product": {
                "$ref": "#/components/schemas/ProductRefOrValue"
              },
              "productOffering": {
                "$ref": "#/components/schemas/ProductOfferingRef_MVO"
              },
              "promotion": {
                "$ref": "#/components/schemas/PromotionRef_MVO"
              },
              "id": {
                "type": "string",
                "description": "Identifier of the ProductOfferingQualification item (generally it is a sequence number 01, 02, 03, ...)"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualificationStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualificationStateChangeEventPayload": {
        "type": "object",
        "description": "QueryProductOfferingQualificationStateChangeEventPayload generic structure",
        "properties": {
          "queryProductOfferingQualification": {
            "$ref": "#/components/schemas/QueryProductOfferingQualification"
          }
        }
      },
      "QueryProductOfferingQualification_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualification is used to perform a commercial eligibility. It allows client side to pass a list of criteria (search criteria to provide the context of the qualification) and in the response the seller send (if any) a list of product offering qualified.",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/ChannelRef"
              },
              "category": {
                "$ref": "#/components/schemas/CategoryRef"
              },
              "description": {
                "type": "string",
                "description": "Description of the QueryProductOfferingQualification"
              },
              "instantSyncQualification": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
              },
              "note": {
                "type": "array",
                "description": "Free form text associated with the qualification request",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "searchCriteria": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationItem_FVO"
              },
              "relatedParty": {
                "type": "array",
                "description": "Party playing a role for this qualification (as requester for example)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_FVO"
                }
              },
              "requestedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline date when the requester expected a qualification answer"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "QueryProductOfferingQualification_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "QueryProductOfferingQualification is used to perform a commercial eligibility. It allows client side to pass a list of criteria (search criteria to provide the context of the qualification) and in the response the seller send (if any) a list of product offering qualified.",
            "properties": {
              "channel": {
                "$ref": "#/components/schemas/ChannelRef_MVO"
              },
              "category": {
                "$ref": "#/components/schemas/CategoryRef_MVO"
              },
              "description": {
                "type": "string",
                "description": "Description of the QueryProductOfferingQualification"
              },
              "effectiveQualificationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Effective date to QueryProductOfferingQualification completion"
              },
              "expectedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Expected date rom the server to provide an answer for the query qualification request"
              },
              "expirationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date the qualification response expires"
              },
              "instantSyncQualification": {
                "type": "boolean",
                "description": "An indicator which when the value is \"true\" means that requester expects to get qualifcation result immediately in the response. If the indicator is true then the response code of 200 indicates the operation is successful otherwise a task is created with a response 201."
              },
              "note": {
                "type": "array",
                "description": "Free form text associated with the qualification request",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              },
              "qualifiedProductOfferingItem": {
                "type": "array",
                "description": "Qualification item for a product or a category",
                "items": {
                  "$ref": "#/components/schemas/QueryProductOfferingQualificationItem_MVO"
                }
              },
              "searchCriteria": {
                "$ref": "#/components/schemas/QueryProductOfferingQualificationItem_MVO"
              },
              "relatedParty": {
                "type": "array",
                "description": "Party playing a role for this qualification (as requester for example)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyOrPartyRole_MVO"
                }
              },
              "requestedQualificationCompletionDate": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline date when the requester expected a qualification answer"
              },
              "state": {
                "$ref": "#/components/schemas/TaskStateType"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "It's a Order item that has been executed previously.",
            "properties": {
              "orderItemAction": {
                "$ref": "#/components/schemas/ItemActionType"
              },
              "orderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "role": {
                "type": "string",
                "description": "Role played by the  Order"
              },
              "orderId": {
                "type": "string",
                "description": "Unique identifier of a related  Order."
              },
              "orderItemId": {
                "type": "string",
                "description": "Id of an item of a product order"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedOrderItem_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "It's a Order item that has been executed previously.",
            "properties": {
              "orderItemAction": {
                "$ref": "#/components/schemas/ItemActionType"
              },
              "orderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "role": {
                "type": "string",
                "description": "Role played by the  Order"
              },
              "orderId": {
                "type": "string",
                "description": "Unique identifier of a related  Order."
              },
              "orderItemId": {
                "type": "string",
                "description": "Id of an item of a product order"
              }
            },
            "required": [
              "role",
              "orderId",
              "orderItemId"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedOrderItem_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "It's a Order item that has been executed previously.",
            "properties": {
              "orderItemAction": {
                "$ref": "#/components/schemas/ItemActionType"
              },
              "orderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "role": {
                "type": "string",
                "description": "Role played by the  Order"
              },
              "orderId": {
                "type": "string",
                "description": "Unique identifier of a related  Order."
              },
              "orderItemId": {
                "type": "string",
                "description": "Id of an item of a product order"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyOrPartyRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyOrPartyRole_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole_FVO"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyOrPartyRole_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyOrPartyRole_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRefOrValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRefOrValue_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRefOrValue_FVO"
              }
            },
            "required": [
              "role",
              "place"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRefOrValue_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRef": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRef_MVO": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRef": {
        "type": "object",
        "description": "Service reference, for when Service is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRef_MVO": {
        "type": "object",
        "description": "Service reference, for when Service is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "Skill": {
        "type": "object",
        "description": "Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level).",
        "properties": {
          "skillCode": {
            "type": "string",
            "description": "Code of the skill"
          },
          "skillName": {
            "type": "string",
            "description": "Name of the skill, such as Java language"
          },
          "evaluatedLevel": {
            "type": "string",
            "description": "Level of expertise in a skill evaluated for an individual"
          },
          "comment": {
            "type": "string",
            "description": "A free text comment linked to the evaluation done"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          }
        }
      },
      "StandardIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StandardIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StringArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of String(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of string characteristics",
                "items": {
                  "type": "string",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "StringArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of String(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of string characteristics",
                "items": {
                  "type": "string",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "StringArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of String(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of string characteristics",
                "items": {
                  "type": "string",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "StringCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a String.",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "StringCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a String.",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "StringCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a String.",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "Supplier": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole"
          }
        ]
      },
      "Supplier_FVO": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_FVO"
          }
        ]
      },
      "Supplier_MVO": {
        "type": "object",
        "description": "When business partner is the Supplier ",
        "allOf": [
          {
            "$ref": "#/components/schemas/PartyRole_MVO"
          }
        ]
      },
      "TargetProductSchema": {
        "type": "object",
        "description": "The reference object to the schema and type of target product which is described by product specification",
        "properties": {
          "@type": {
            "type": "string",
            "description": "Class type of the target product"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "This field provides a link to the schema describing the target product"
          }
        }
      },
      "TargetProductSchema_FVO": {
        "type": "object",
        "description": "The reference object to the schema and type of target product which is described by product specification",
        "properties": {
          "@type": {
            "type": "string",
            "description": "Class type of the target product"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "This field provides a link to the schema describing the target product"
          }
        },
        "required": [
          "@type",
          "@schemaLocation"
        ]
      },
      "TargetProductSchema_MVO": {
        "type": "object",
        "description": "The reference object to the schema and type of target product which is described by product specification",
        "properties": {
          "@type": {
            "type": "string",
            "description": "Class type of the target product"
          },
          "@schemaLocation": {
            "type": "string",
            "format": "uri",
            "description": "This field provides a link to the schema describing the target product"
          }
        }
      },
      "TaskStateType": {
        "enum": [
          "acknowledged",
          "rejected",
          "inProgress",
          "cancelled",
          "done",
          "terminatedWithError"
        ],
        "type": "string",
        "description": "Possible values for the state of a task"
      },
      "TaxDefinition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.).",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TaxDefinition_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. For example, there are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California, City Tax levied by the City of Los Angeles, etc.).",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the tax."
              },
              "name": {
                "type": "string",
                "description": "Tax name."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "jurisdictionName": {
                "type": "string",
                "description": "Name of the jurisdiction that levies the tax",
                "example": "USA"
              },
              "jurisdictionLevel": {
                "type": "string",
                "description": "Level of the jurisdiction that levies the tax",
                "example": "Country"
              },
              "taxType": {
                "type": "string",
                "description": "Type of the tax.",
                "example": "VAT"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TaxExemptionCertificate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition"
                },
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TaxExemptionCertificate_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition"
                },
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TaxExemptionCertificate_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the tax exemption within list of the exemptions"
              },
              "taxDefinition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaxDefinition_MVO"
                },
                "description": "A list of taxes that are covered by the exemption, e.g. City Tax, State Tax. The definition would include the exemption (e.g. for a rate exemption 0% would be a full exemption, 5% could be a partial exemption if the actual rate was 10%)."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "certificateNumber": {
                "type": "string",
                "description": "Identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction"
              },
              "issuingJurisdiction": {
                "type": "string",
                "description": "Name of the jurisdiction that issued the exemption",
                "example": "USA"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the tax exemption"
              },
              "attachment": {
                "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TerminationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the termination error"
              },
              "value": {
                "type": "string",
                "description": "Text to describe the termination error - for example: Unable to proceed to qualification because incomplete information provided"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TerminationError_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the termination error"
              },
              "value": {
                "type": "string",
                "description": "Text to describe the termination error - for example: Unable to proceed to qualification because incomplete information provided"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "startDateTime": {
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "description": "End of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        }
      },
      "Error": {
        "discriminator": "@type",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      },
      "CheckProductOfferingQualificationNotificationPayload": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CheckProductOfferingQualificationAttributeValueChangeEvent"
          },
          {
            "$ref": "#/components/schemas/CheckProductOfferingQualificationCreateEvent"
          },
          {
            "$ref": "#/components/schemas/CheckProductOfferingQualificationDeleteEvent"
          },
          {
            "$ref": "#/components/schemas/CheckProductOfferingQualificationStateChangeEvent"
          }
        ]
      },
      "QueryProductOfferingQualificationNotificationPayload": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/QueryProductOfferingQualificationAttributeValueChangeEvent"
          },
          {
            "$ref": "#/components/schemas/QueryProductOfferingQualificationCreateEvent"
          },
          {
            "$ref": "#/components/schemas/QueryProductOfferingQualificationDeleteEvent"
          },
          {
            "$ref": "#/components/schemas/QueryProductOfferingQualificationStateChangeEvent"
          }
        ]
      }
    },
    "messages": {
      "ListCheckProductOfferingQualificationRequest": {
        "name": "ListCheckProductOfferingQualificationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListCheckProductOfferingQualificationRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200CheckProductOfferingQualificationArrayJsonReply": {
        "name": "200CheckProductOfferingQualificationArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CheckProductOfferingQualification"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "400JsonReply": {
        "name": "400JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode400Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "401JsonReply": {
        "name": "401JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode401Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "403JsonReply": {
        "name": "403JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode403Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "404JsonReply": {
        "name": "404JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode404Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "405JsonReply": {
        "name": "405JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode405Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "500JsonReply": {
        "name": "500JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode500Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "501JsonReply": {
        "name": "501JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode501Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "503JsonReply": {
        "name": "503JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode503Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "CreateCheckProductOfferingQualificationJsonRequest": {
        "name": "CreateCheckProductOfferingQualificationJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification_FVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/CreateCheckProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200CheckProductOfferingQualification_TaskJsonReply": {
        "name": "200CheckProductOfferingQualification_TaskJsonReply",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "201CheckProductOfferingQualificationJsonReply": {
        "name": "201CheckProductOfferingQualificationJsonReply",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode201Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "409JsonReply": {
        "name": "409JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode409Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveCheckProductOfferingQualificationRequest": {
        "name": "RetrieveCheckProductOfferingQualificationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveCheckProductOfferingQualificationRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200CheckProductOfferingQualification_GetJsonReply": {
        "name": "200CheckProductOfferingQualification_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "DeleteCheckProductOfferingQualificationRequest": {
        "name": "DeleteCheckProductOfferingQualificationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/DeleteCheckProductOfferingQualificationRequestParametersHeader"
            }
          ]
        }
      },
      "204Reply": {
        "name": "204Reply",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode204Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        }
      },
      "PatchCheckProductOfferingQualificationJsonRequest": {
        "name": "PatchCheckProductOfferingQualificationJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchCheckProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchCheckProductOfferingQualificationMergePatchRequest": {
        "name": "PatchCheckProductOfferingQualificationMergePatchRequest",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchCheckProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "PatchCheckProductOfferingQualificationJsonPatchRequest": {
        "name": "PatchCheckProductOfferingQualificationJsonPatchRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchCheckProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "PatchCheckProductOfferingQualificationJsonPatchQueryRequest": {
        "name": "PatchCheckProductOfferingQualificationJsonPatchQueryRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchCheckProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "200CheckProductOfferingQualification_PatchJsonReply": {
        "name": "200CheckProductOfferingQualification_PatchJsonReply",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200CheckProductOfferingQualification_PatchMergePatchReply": {
        "name": "200CheckProductOfferingQualification_PatchMergePatchReply",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "200CheckProductOfferingQualification_PatchJsonPatchReply": {
        "name": "200CheckProductOfferingQualification_PatchJsonPatchReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CheckProductOfferingQualification"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CheckProductOfferingQualification"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "200CheckProductOfferingQualification_PatchJsonPatchQueryReply": {
        "name": "200CheckProductOfferingQualification_PatchJsonPatchQueryReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CheckProductOfferingQualification"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CheckProductOfferingQualification"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "ListQueryProductOfferingQualificationRequest": {
        "name": "ListQueryProductOfferingQualificationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListQueryProductOfferingQualificationRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200QueryProductOfferingQualificationArrayJsonReply": {
        "name": "200QueryProductOfferingQualificationArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/QueryProductOfferingQualification"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "CreateQueryProductOfferingQualificationJsonRequest": {
        "name": "CreateQueryProductOfferingQualificationJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification_FVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/CreateQueryProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200QueryProductOfferingQualification_TaskJsonReply": {
        "name": "200QueryProductOfferingQualification_TaskJsonReply",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "201QueryProductOfferingQualificationJsonReply": {
        "name": "201QueryProductOfferingQualificationJsonReply",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode201Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveQueryProductOfferingQualificationRequest": {
        "name": "RetrieveQueryProductOfferingQualificationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveQueryProductOfferingQualificationRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200QueryProductOfferingQualification_GetJsonReply": {
        "name": "200QueryProductOfferingQualification_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "DeleteQueryProductOfferingQualificationRequest": {
        "name": "DeleteQueryProductOfferingQualificationRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/DeleteQueryProductOfferingQualificationRequestParametersHeader"
            }
          ]
        }
      },
      "PatchQueryProductOfferingQualificationJsonRequest": {
        "name": "PatchQueryProductOfferingQualificationJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchQueryProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchQueryProductOfferingQualificationMergePatchRequest": {
        "name": "PatchQueryProductOfferingQualificationMergePatchRequest",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchQueryProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "PatchQueryProductOfferingQualificationJsonPatchRequest": {
        "name": "PatchQueryProductOfferingQualificationJsonPatchRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchQueryProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "PatchQueryProductOfferingQualificationJsonPatchQueryRequest": {
        "name": "PatchQueryProductOfferingQualificationJsonPatchQueryRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchQueryProductOfferingQualificationRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "200QueryProductOfferingQualification_PatchJsonReply": {
        "name": "200QueryProductOfferingQualification_PatchJsonReply",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200QueryProductOfferingQualification_PatchMergePatchReply": {
        "name": "200QueryProductOfferingQualification_PatchMergePatchReply",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualification"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "200QueryProductOfferingQualification_PatchJsonPatchReply": {
        "name": "200QueryProductOfferingQualification_PatchJsonPatchReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/QueryProductOfferingQualification"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueryProductOfferingQualification"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "200QueryProductOfferingQualification_PatchJsonPatchQueryReply": {
        "name": "200QueryProductOfferingQualification_PatchJsonPatchQueryReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/QueryProductOfferingQualification"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueryProductOfferingQualification"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "CheckProductOfferingQualificationNotification": {
        "name": "CheckProductOfferingQualificationNotification",
        "payload": {
          "$ref": "#/components/schemas/CheckProductOfferingQualificationNotificationPayload"
        }
      },
      "QueryProductOfferingQualificationNotification": {
        "name": "QueryProductOfferingQualificationNotification",
        "payload": {
          "$ref": "#/components/schemas/QueryProductOfferingQualificationNotificationPayload"
        }
      }
    }
  },
  "defaultContentType": "application/json"
}