{
  "asyncapi": "2.6.0",
  "servers": {
    "kafkaServer": {
      "url": "kafka:9092",
      "protocol": "kafka",
      "description": "Kafka broker"
    }
  },
  "info": {
    "title": "Service Inventory Management",
    "description": "The intent of this API is to provide a consistent/standardized mechanism to query and manipulate the Service inventory.\nThe Service Inventory API can be used to query the service instances for a customer via Self Service Portal or the Call Centre operator can query the service instances on behalf of the customer while a customer may have a complaint or a query.\nNote: Only the CustomerFacingServices instances will be presented to the customer.\nThe Service Inventory API can be called by the Service Order Management to create a new service instance/ update an existing service instance in the Service Inventory.\n### Service resource\nService is an abstract base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of  Service: CustomerFacingService and ResourceFacingService.\n### Service Inventory API performs the following operations on service  :\n- Retrieve  a service or a collection of services depending on filter criteria\n- Partial update of a service (including updating rules)\n- Create a service (including default values and creation rules and for administration users only)\n- Delete a service (for administration users only)\n- Notification of events on service",
    "version": "5.0.0"
  },
  "tags": [
    {
      "name": "service",
      "description": "Operations for Service Resource"
    }
  ],
  "channels": {
    "{prefix}.serviceInventoryManagement.v5.listService.commandRequest": {
      "publish": {
        "description": "List or find Service objects",
        "operationId": "listServiceRequest",
        "summary": "List or find Service objects",
        "message": {
          "$ref": "#/components/messages/ListServiceRequest"
        },
        "tags": [
          {
            "name": "service"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.listService.commandReply": {
      "subscribe": {
        "operationId": "listServiceReply",
        "tags": [
          {
            "name": "service"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200ServiceArrayJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.createService.commandRequest": {
      "publish": {
        "description": "This operation creates a Service entity.",
        "operationId": "createServiceRequest",
        "summary": "Creates a Service",
        "message": {
          "$ref": "#/components/messages/CreateServiceJsonRequest"
        },
        "tags": [
          {
            "name": "service"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.createService.commandReply": {
      "subscribe": {
        "operationId": "createServiceReply",
        "tags": [
          {
            "name": "service"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/201ServiceJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.retrieveService.commandRequest": {
      "publish": {
        "description": "This operation retrieves a Service entity. Attribute selection enabled for all first level attributes.",
        "operationId": "retrieveServiceRequest",
        "summary": "Retrieves a Service by ID",
        "message": {
          "$ref": "#/components/messages/RetrieveServiceRequest"
        },
        "tags": [
          {
            "name": "service"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.retrieveService.commandReply": {
      "subscribe": {
        "operationId": "retrieveServiceReply",
        "tags": [
          {
            "name": "service"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200Service_GetJsonReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.patchService.commandRequest": {
      "publish": {
        "description": "This operation updates partially a Service entity.",
        "operationId": "patchServiceRequest",
        "summary": "Updates partially a Service",
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/PatchServiceJsonRequest"
            },
            {
              "$ref": "#/components/messages/PatchServiceMergePatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchServiceJsonPatchRequest"
            },
            {
              "$ref": "#/components/messages/PatchServiceJsonPatchQueryRequest"
            }
          ]
        },
        "tags": [
          {
            "name": "service"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.patchService.commandReply": {
      "subscribe": {
        "operationId": "patchServiceReply",
        "tags": [
          {
            "name": "service"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/200Service_PatchJsonReply"
            },
            {
              "$ref": "#/components/messages/200Service_PatchMergePatchReply"
            },
            {
              "$ref": "#/components/messages/200Service_PatchJsonPatchReply"
            },
            {
              "$ref": "#/components/messages/200Service_PatchJsonPatchQueryReply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.deleteService.commandRequest": {
      "publish": {
        "description": "This operation deletes a Service entity.",
        "operationId": "deleteServiceRequest",
        "summary": "Deletes a Service",
        "message": {
          "$ref": "#/components/messages/DeleteServiceRequest"
        },
        "tags": [
          {
            "name": "service"
          }
        ]
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.deleteService.commandReply": {
      "subscribe": {
        "operationId": "deleteServiceReply",
        "tags": [
          {
            "name": "service"
          }
        ],
        "message": {
          "oneOf": [
            {
              "$ref": "#/components/messages/204Reply"
            },
            {
              "$ref": "#/components/messages/400JsonReply"
            },
            {
              "$ref": "#/components/messages/401JsonReply"
            },
            {
              "$ref": "#/components/messages/403JsonReply"
            },
            {
              "$ref": "#/components/messages/404JsonReply"
            },
            {
              "$ref": "#/components/messages/405JsonReply"
            },
            {
              "$ref": "#/components/messages/409JsonReply"
            },
            {
              "$ref": "#/components/messages/500JsonReply"
            },
            {
              "$ref": "#/components/messages/501JsonReply"
            },
            {
              "$ref": "#/components/messages/503JsonReply"
            }
          ]
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    },
    "{prefix}.serviceInventoryManagement.v5.service.notificationEvent": {
      "subscribe": {
        "operationId": "serviceNotification",
        "tags": [
          {
            "name": "service"
          }
        ],
        "message": {
          "$ref": "#/components/messages/ServiceNotification"
        }
      },
      "parameters": {
        "prefix": {
          "$ref": "#/components/parameters/Prefix"
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Prefix": {
        "description": "The prefix.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "RequestHeaders": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CorrelationHeader"
          },
          {
            "properties": {
              "Reply-Channel": {
                "description": "Name of the channel to send the reply to.",
                "type": "string"
              }
            },
            "required": [
              "Reply-Channel"
            ],
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CorrelationHeader": {
        "properties": {
          "X-Correlation-Id": {
            "description": "Correlation ID set by application",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "X-Correlation-Id"
        ],
        "type": "object"
      },
      "RequestChannel": {
        "properties": {
          "X-Request-Channel": {
            "description": "Channel on which the request was received",
            "type": "string"
          }
        },
        "required": [
          "X-Request-Channel"
        ],
        "type": "object"
      },
      "QueryFilters": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "QueryFiltersHeader": {
        "properties": {
          "Query-Filters": {
            "$ref": "#/components/schemas/QueryFilters"
          }
        },
        "type": "object"
      },
      "XTotalCountHeader": {
        "properties": {
          "X-Total-Count": {
            "type": "integer",
            "description": "Total number of items matching criteria"
          }
        },
        "type": "object"
      },
      "XResultCountHeader": {
        "properties": {
          "X-Result-Count": {
            "type": "integer",
            "description": "Actual number of items returned in the response body"
          }
        },
        "type": "object"
      },
      "IdParameter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the Resource"
          }
        },
        "required": [
          "id"
        ]
      },
      "FieldsParameter": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "Comma-separated properties to be provided in response"
          }
        }
      },
      "OffsetParameter": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Requested index for start of resources to be provided in response"
          }
        }
      },
      "LimitParameter": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Requested number of resources to be provided in response"
          }
        }
      },
      "ListServiceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldsParameter"
          },
          {
            "$ref": "#/components/schemas/OffsetParameter"
          },
          {
            "$ref": "#/components/schemas/LimitParameter"
          }
        ]
      },
      "ListServiceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/ListServiceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode200Header": {
        "properties": {
          "Status-Code": {
            "const": 200,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode400Header": {
        "properties": {
          "Status-Code": {
            "const": 400,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode401Header": {
        "properties": {
          "Status-Code": {
            "const": 401,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode403Header": {
        "properties": {
          "Status-Code": {
            "const": 403,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode404Header": {
        "properties": {
          "Status-Code": {
            "const": 404,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode405Header": {
        "properties": {
          "Status-Code": {
            "const": 405,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode500Header": {
        "properties": {
          "Status-Code": {
            "const": 500,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode501Header": {
        "properties": {
          "Status-Code": {
            "const": 501,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode503Header": {
        "properties": {
          "Status-Code": {
            "const": 503,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "CreateServiceRequestParameters": {
        "$ref": "#/components/schemas/FieldsParameter"
      },
      "CreateServiceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/CreateServiceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode201Header": {
        "properties": {
          "Status-Code": {
            "const": 201,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "StatusCode409Header": {
        "properties": {
          "Status-Code": {
            "const": 409,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "RetrieveServiceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "RetrieveServiceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/RetrieveServiceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "PatchServiceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IdParameter"
          },
          {
            "$ref": "#/components/schemas/FieldsParameter"
          }
        ]
      },
      "PatchServiceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/PatchServiceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "DeleteServiceRequestParameters": {
        "$ref": "#/components/schemas/IdParameter"
      },
      "DeleteServiceRequestParametersHeader": {
        "properties": {
          "Parameters": {
            "$ref": "#/components/schemas/DeleteServiceRequestParameters"
          }
        },
        "required": [
          "Parameters"
        ],
        "type": "object"
      },
      "StatusCode204Header": {
        "properties": {
          "Status-Code": {
            "const": 204,
            "type": "integer"
          }
        },
        "required": [
          "Status-Code"
        ],
        "type": "object"
      },
      "Addressable": {
        "type": "object",
        "description": "Base schema for addressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        }
      },
      "Addressable_FVO": {
        "type": "object",
        "description": "Base schema for addressable entities"
      },
      "Addressable_MVO": {
        "type": "object",
        "description": "Base schema for addressable entities"
      },
      "Attachment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef"
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_FVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Attachment entity and not the AttachmentRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Attachment_MVO"
          },
          {
            "$ref": "#/components/schemas/AttachmentRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "AttachmentRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment"
              },
              "url": {
                "description": "Link to the attachment media/content",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Attachment_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            },
            "required": [
              "attachmentType",
              "mimeType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Attachment_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the attachment"
              },
              "description": {
                "type": "string",
                "description": "A narrative text describing the content of the attachment",
                "example": "Photograph of the Product"
              },
              "url": {
                "type": "string",
                "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
                "example": "https://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
              },
              "content": {
                "type": "string",
                "format": "base64",
                "description": "The actual contents of the attachment object, if embedded, encoded as base64"
              },
              "size": {
                "$ref": "#/components/schemas/Quantity"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "attachmentType": {
                "type": "string",
                "description": "a business characterization of the purpose of the attachment, for example logo, instructionManual, contractCopy"
              },
              "mimeType": {
                "type": "string",
                "description": "a technical characterization of the attachment content format using IETF Mime Types"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object",
                "description": "The event linked to the involved resource object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "BooleanArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Boolean(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Boolean(s).",
                "items": {
                  "type": "boolean",
                  "description": "Characteristic item boolean value"
                }
              }
            }
          }
        ]
      },
      "BooleanArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Boolean(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Boolean(s).",
                "items": {
                  "type": "boolean",
                  "description": "Characteristic item boolean value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "BooleanArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Boolean(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Boolean(s).",
                "items": {
                  "type": "boolean",
                  "description": "Characteristic item boolean value"
                }
              }
            }
          }
        ]
      },
      "BooleanCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Boolean.",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "BooleanCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Boolean.",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "BooleanCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Boolean.",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "CalendarPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Calendar period",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CalendarPeriod_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Calendar period",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "CalendarPeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Calendar period",
            "properties": {
              "day": {
                "type": "string",
                "description": "Day where the calendar status applies (e.g.: monday, mon-to-fri, weekdays, weekend, all week, ...)"
              },
              "timeZone": {
                "type": "string",
                "description": "Indication of the timezone applicable to the calendar information (e.g.: Paris, GMT+1)"
              },
              "hourPeriod": {
                "type": "array",
                "description": "Collection of hour intervals",
                "items": {
                  "$ref": "#/components/schemas/HourPeriod_MVO"
                }
              },
              "status": {
                "type": "string",
                "description": "Indication of the availability of the calendar period (e.g.: available, booked, etc.)"
              }
            },
            "required": [
              "status"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            },
            "required": [
              "id",
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "CharacteristicRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_FVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Characteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair. This is an abstract base class, the actual value is in one of the strongly-typed subclasses : StringCharacteristic, ObjectCharacteristic, FloatCharacteristic, BooleanCharacteristic, NumberCharacteristic, IntegerCharacteristic, StringArrayCharacteristic, ObjectArrayCharacteristic, BooleanArrayCharacteristic, NumberArrayCharacteristic, IntegerArrayCharacteristic...",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "description": "Collection of characteristic relationships",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship_MVO"
                }
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The identifier of the referred entity."
              },
              "href": {
                "type": "string",
                "description": "The URI of the referred entity."
              },
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "EntityRefOrValue": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "EntityRefOrValue_FVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "EntityRefOrValue_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "EntityRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            }
          }
        ]
      },
      "EntityRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          },
          {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the referred entity."
              },
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              }
            }
          }
        ]
      },
      "EntityRelationship": {
        "type": "object",
        "description": "A uni-directional relationship from this entity to a target entity instance",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "id": {
            "type": "string"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          },
          "topicRef": {
            "type": "string",
            "description": "A reference to the topic from which this entity can be fetched"
          }
        }
      },
      "EntityRelationship_FVO": {
        "type": "object",
        "description": "A uni-directional relationship from this entity to a target entity instance",
        "properties": {
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "@referredType": {
            "type": "string"
          },
          "@type": {
            "type": "string"
          }
        }
      },
      "EntityRelationship_MVO": {
        "type": "object",
        "description": "A uni-directional relationship from this entity to a target entity instance",
        "properties": {
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The association role for this entity"
          },
          "validFor": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "associationSpec": {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          "relationshipType": {
            "type": "string",
            "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "@referredType": {
            "type": "string"
          }
        }
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanation of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "description": "Collection of analytic characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "Extensible_MVO": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type"
      },
      "ExternalIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              },
              "id": {
                "type": "string",
                "description": "identification of the entity within the external system."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ExternalIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "An identification of an entity that is owned by or originates in a software system different from the current system, for example a ProductOrder handed off from a commerce platform into an order handling system. The structure identifies the system itself, the nature of the entity within the system (e.g. class name) and the unique ID of the entity within the system. It is anticipated that multiple external IDs can be held for a single entity, e.g. if the entity passed through multiple systems on the way to the current system. In this case the consumer is expected to sequence the IDs in the array in reverse order of provenance, i.e. most recent system first in the list.",
            "properties": {
              "owner": {
                "type": "string",
                "description": "Name of the external system that owns the entity.",
                "example": "MagentoCommerce"
              },
              "externalIdentifierType": {
                "type": "string",
                "description": "Type of the identification, typically would be the type of the entity within the external system",
                "example": "ProductOrder"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Feature": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "FeatureRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "FeatureRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "relationshipType",
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "FeatureRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Configuration feature",
            "properties": {
              "relationshipType": {
                "description": "This is the type of the feature relationship.",
                "type": "string",
                "enum": [
                  "excluded",
                  "includes",
                  "may include",
                  "requires"
                ]
              },
              "name": {
                "description": "This is the name of the target feature.",
                "type": "string"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              }
            },
            "required": [
              "relationshipType",
              "id"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Feature_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship_FVO"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef_FVO"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Feature_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Configuration feature.",
            "properties": {
              "isBundle": {
                "description": "True if this is a feature group. Default is false.",
                "type": "boolean"
              },
              "featureRelationship": {
                "type": "array",
                "description": "Collection of feature relationships",
                "items": {
                  "$ref": "#/components/schemas/FeatureRelationship_MVO"
                }
              },
              "featureCharacteristic": {
                "description": "This is a list of Characteristics for a particular feature.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "policyConstraint": {
                "description": "Reference to manage a list of feature specification policy constraints",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyRef_MVO"
                }
              },
              "isEnabled": {
                "description": "True if this feature is enabled. Default is true.",
                "type": "boolean"
              },
              "name": {
                "description": "This is the name for the feature.",
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_FVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_FVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "Structured textual way of describing how to find a Property in an urban area (country properties are often defined differently).\nNote : Address corresponds to SID UrbanPropertyAddress",
            "properties": {
              "city": {
                "type": "string",
                "description": "City that the address is in"
              },
              "country": {
                "type": "string",
                "description": "Country that the address is in"
              },
              "locality": {
                "type": "string",
                "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi rural in nature. [ANZLIC-STREET], or a suburb, a bounded locality within a city, town or shire principally of urban character [ANZLICSTREET]"
              },
              "postcode": {
                "type": "string",
                "description": "descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also know as zipcode)"
              },
              "stateOrProvince": {
                "type": "string",
                "description": "the State or Province that the address is in"
              },
              "streetName": {
                "type": "string",
                "description": "Name of the street or other street type"
              },
              "streetNr": {
                "type": "string",
                "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
              },
              "streetNrLast": {
                "type": "string",
                "description": "Last number in a range of street numbers allocated to a property"
              },
              "streetNrLastSuffix": {
                "type": "string",
                "description": "Last street number suffix for a ranged address"
              },
              "streetNrSuffix": {
                "type": "string",
                "description": "the first street number suffix"
              },
              "streetSuffix": {
                "type": "string",
                "description": "A modifier denoting a relative direction"
              },
              "streetType": {
                "type": "string",
                "description": "alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf "
              },
              "countryCode": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandardIdentifier_MVO"
                },
                "description": "Country codes are short alphabetic or numeric geographical codes (geocodes) developed to represent countries and dependent areas, for use in data processing and communications. Several different systems have been developed to do this. The term country code frequently refers to ISO 3166-1 alpha-2 or international dialing codes, the E.164 country calling codes."
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "geographicLocation": {
                "$ref": "#/components/schemas/GeographicLocationRefOrValue_MVO"
              },
              "geographicSubAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddress_MVO"
                }
              },
              "geographicAddressType": {
                "type": "string",
                "description": "Classification of the address, e.g., residential, industrial "
              }
            }
          }
        ]
      },
      "GeographicLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the geographic location"
              },
              "href": {
                "type": "string",
                "description": "An URI used to access to the geographic location resource"
              },
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ]
      },
      "GeographicLocationRef": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the GeographicLocation entity and not the GeographicLocationRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicLocationRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRef_FVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocationRef_MVO": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "GeographicLocation_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "@type": {
                "type": "string",
                "enum": [
                  "GeoJsonPoint",
                  "GeoJsonMultiPoint",
                  "GeoJsonLineString",
                  "GeoJsonMultiLineString",
                  "GeoJsonPolygon"
                ],
                "description": "The name of the GeoJSON structure used in the geometry attribute"
              },
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "GeographicLocation_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "A GeographicLocation is a pure-virtual super-class to the GeoJSON-aligned geometries of Point (addresses and locations), MultiPoint, LineString (streets, highways and boundaries), MultiLineString and Polygon (countries, provinces, tracts of land). Use the @type attribute to specify which of these is being specified by the geometry attribute.",
            "properties": {
              "bbox": {
                "type": "array",
                "description": "A bounding box array that contains the geometry. The axes order follows the axes order of the geometry",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "GeographicSite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "calendar": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue"
                }
              },
              "siteRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship"
                }
              }
            }
          }
        ]
      },
      "GeographicSiteRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "href": {
                "type": "string",
                "description": "Reference of the related geographic site"
              },
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "id": {
                "type": "string",
                "description": "Unique identifier of the related site entity within the server"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSiteRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSiteRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Details of geographic site relationship",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role of the related site in the relationship"
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "relationshipType": {
                "type": "string",
                "description": "Type of relationship"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSite_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_FVO"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "calendar": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_FVO"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue_FVO"
                }
              },
              "siteRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship_FVO"
                }
              }
            }
          }
        ]
      },
      "GeographicSite_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Place_MVO"
          },
          {
            "type": "object",
            "description": "It defines a Site as a convenience class that allows to easily refer to places important to other entities",
            "properties": {
              "code": {
                "type": "string",
                "description": "A code that may be used for some addressing schemes eg: [ANSI T1.253-1999]"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the GeographicSite was created"
              },
              "description": {
                "type": "string",
                "description": "Text describing additional information regarding the site"
              },
              "status": {
                "type": "string",
                "description": "The condition of the GeographicSite, such as planned, underConstruction, cancelled, active, inactive, former"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "calendar": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalendarPeriod_MVO"
                }
              },
              "place": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlaceRefOrValue_MVO"
                }
              },
              "siteRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GeographicSiteRelationship_MVO"
                }
              }
            }
          }
        ]
      },
      "GeographicSubAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "href": {
                "type": "string",
                "description": "Link to the subAddress"
              },
              "id": {
                "type": "string",
                "description": "Unique Identifier of the subAddress"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            },
            "required": [
              "subUnitNumber",
              "subUnitType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddressUnit_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
            "properties": {
              "subUnitNumber": {
                "type": "string",
                "description": "The discriminator used for the subunit, often just a simple number but may also be a range."
              },
              "subUnitType": {
                "type": "string",
                "description": "The type of subunit e.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF, RACK"
              }
            },
            "required": [
              "subUnitNumber",
              "subUnitType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddress_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_FVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "GeographicSubAddress_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Representation of a GeographicSubAddress \nIt is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
            "properties": {
              "buildingName": {
                "type": "string",
                "description": "allows for buildings that have well-known names"
              },
              "levelNumber": {
                "type": "string",
                "description": "used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2"
              },
              "levelType": {
                "type": "string",
                "description": "describes level types within a building"
              },
              "name": {
                "type": "string",
                "description": "Name of the subAddress to identify it with a meaningful identification"
              },
              "privateStreetName": {
                "type": "string",
                "description": "private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office."
              },
              "privateStreetNumber": {
                "type": "string",
                "description": "private streets numbers internal to a private street"
              },
              "subUnit": {
                "type": "array",
                "description": "Representation of a SubUnit. It is used for describing subunit within a subAddress e.g. BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
                "items": {
                  "$ref": "#/components/schemas/GeographicSubAddressUnit_MVO"
                }
              },
              "subAddressType": {
                "type": "string",
                "description": "Type of subAddress : it can be a subunit or a private street"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "HourPeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Hour interval",
            "properties": {
              "endHour": {
                "type": "string",
                "description": "The time when the status ends applying"
              },
              "startHour": {
                "type": "string",
                "description": "The time when the status starts applying"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "HourPeriod_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Hour interval",
            "properties": {
              "endHour": {
                "type": "string",
                "description": "The time when the status ends applying"
              },
              "startHour": {
                "type": "string",
                "description": "The time when the status starts applying"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntegerArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Integer(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Integer(s).",
                "items": {
                  "type": "integer",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "IntegerArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Integer(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Integer(s).",
                "items": {
                  "type": "integer",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "IntegerArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Integer(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Integer(s).",
                "items": {
                  "type": "integer",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "IntegerCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Integer.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "IntegerCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Integer.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "IntegerCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Integer.",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "Intent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An Intent instance is the formal description of all expectations including requirements, goals, and constraints given to a technical system",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the intent."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether an intent represents a single intent (false), or a bundle of intents(true)."
              },
              "priority": {
                "type": "string",
                "description": "Can be used by intent owner to prioritize intents in an intent management system"
              },
              "statusChangeDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date that the entity status changed to the current one"
              },
              "context": {
                "type": "string",
                "description": "A string used to give a context to the intent"
              },
              "version": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of an intent."
              },
              "intentSpecification": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "intentRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityRelationship"
                },
                "description": "A list of intents related to this intent"
              },
              "characteristic": {
                "type": "array",
                "description": "Collection of characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue"
                },
                "description": "Attachments that may be of relevance to this intent, such as picture, document, media"
              },
              "name": {
                "type": "string",
                "description": "The name of the intent."
              },
              "expression": {
                "$ref": "#/components/schemas/IntentExpression"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the creation of this REST resource"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of this REST resource"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this intent"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An Intent expression",
            "properties": {
              "iri": {
                "type": "string",
                "description": "Internationalized Resource Identifier of the intent Expression"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentExpression_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "An Intent expression",
            "properties": {
              "iri": {
                "type": "string",
                "description": "Internationalized Resource Identifier of the intent Expression"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentExpression_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "An Intent expression",
            "properties": {
              "iri": {
                "type": "string",
                "description": "Internationalized Resource Identifier of the intent Expression"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRefOrValue": {
        "type": "object",
        "description": "Intent Ref (if Intent already exists) or Value (if Intent be created or its details be presented)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntentRef"
          },
          {
            "$ref": "#/components/schemas/Intent"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRefOrValue_FVO": {
        "type": "object",
        "description": "Intent Ref (if Intent already exists) or Value (if Intent be created or its details be presented)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntentRef_FVO"
          },
          {
            "$ref": "#/components/schemas/Intent_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRefOrValue_MVO": {
        "type": "object",
        "description": "Intent Ref (if Intent already exists) or Value (if Intent be created or its details be presented)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/IntentRef_MVO"
          },
          {
            "$ref": "#/components/schemas/Intent_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef_FVO": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "IntentRef_MVO": {
        "type": "object",
        "description": "Intent reference, for when Intent is used by other entities",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "Intent_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An Intent instance is the formal description of all expectations including requirements, goals, and constraints given to a technical system",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the intent."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether an intent represents a single intent (false), or a bundle of intents(true)."
              },
              "priority": {
                "type": "string",
                "description": "Can be used by intent owner to prioritize intents in an intent management system"
              },
              "statusChangeDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date that the entity status changed to the current one"
              },
              "context": {
                "type": "string",
                "description": "A string used to give a context to the intent"
              },
              "version": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of an intent."
              },
              "intentSpecification": {
                "$ref": "#/components/schemas/EntityRef_FVO"
              },
              "intentRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityRelationship_FVO"
                },
                "description": "A list of intents related to this intent"
              },
              "characteristic": {
                "type": "array",
                "description": "Collection of characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_FVO"
                },
                "description": "Attachments that may be of relevance to this intent, such as picture, document, media"
              },
              "name": {
                "type": "string",
                "description": "The name of the intent."
              },
              "expression": {
                "$ref": "#/components/schemas/IntentExpression_FVO"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the creation of this REST resource"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of this REST resource"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this intent"
              }
            },
            "required": [
              "name",
              "expression"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Intent_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "An Intent instance is the formal description of all expectations including requirements, goals, and constraints given to a technical system",
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the intent."
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "isBundle": {
                "type": "boolean",
                "description": "isBundle determines whether an intent represents a single intent (false), or a bundle of intents(true)."
              },
              "priority": {
                "type": "string",
                "description": "Can be used by intent owner to prioritize intents in an intent management system"
              },
              "statusChangeDate": {
                "type": "string",
                "format": "date-time",
                "description": "A date time( DateTime). The date that the entity status changed to the current one"
              },
              "context": {
                "type": "string",
                "description": "A string used to give a context to the intent"
              },
              "version": {
                "type": "string",
                "description": "A field that identifies the specific version of an instance of an intent."
              },
              "intentSpecification": {
                "$ref": "#/components/schemas/EntityRef_MVO"
              },
              "intentRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityRelationship_MVO"
                },
                "description": "A list of intents related to this intent"
              },
              "characteristic": {
                "type": "array",
                "description": "Collection of characteristics",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "Collection of related parties",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "attachment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentRefOrValue_MVO"
                },
                "description": "Attachments that may be of relevance to this intent, such as picture, document, media"
              },
              "name": {
                "type": "string",
                "description": "The name of the intent."
              },
              "expression": {
                "$ref": "#/components/schemas/IntentExpression_MVO"
              },
              "creationDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the creation of this REST resource"
              },
              "lastUpdate": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the last update of this REST resource"
              },
              "lifecycleStatus": {
                "type": "string",
                "description": "Used to indicate the current lifecycle status of this intent"
              }
            },
            "required": [
              "name",
              "expression"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "JsonLdExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression"
          },
          {
            "type": "object",
            "description": "JsonLdExpression is the ontology-encoded form of the Intent",
            "properties": {
              "expressionValue": {
                "$ref": "#/components/schemas/JsonLdExpressionValue"
              }
            }
          }
        ]
      },
      "JsonLdExpressionValue": {
        "additionalProperties": true,
        "type": "object",
        "description": "Json LD expression value schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/context"
          },
          {
            "$ref": "#/components/schemas/graph"
          },
          {
            "$ref": "#/components/schemas/common"
          }
        ]
      },
      "JsonLdExpressionValue_MVO": {
        "additionalProperties": true,
        "type": "object",
        "description": "Json LD expression value schema",
        "allOf": [
          {
            "$ref": "#/components/schemas/context_MVO"
          },
          {
            "$ref": "#/components/schemas/graph_MVO"
          },
          {
            "$ref": "#/components/schemas/common_MVO"
          }
        ]
      },
      "JsonLdExpression_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression"
          },
          {
            "type": "object",
            "description": "JsonLdExpression is the ontology-encoded form of the Intent",
            "properties": {
              "expressionValue": {
                "$ref": "#/components/schemas/JsonLdExpressionValue"
              }
            },
            "required": [
              "expressionValue"
            ]
          }
        ]
      },
      "JsonLdExpression_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression_MVO"
          },
          {
            "type": "object",
            "description": "JsonLdExpression is the ontology-encoded form of the Intent",
            "properties": {
              "expressionValue": {
                "$ref": "#/components/schemas/JsonLdExpressionValue_MVO"
              }
            },
            "required": [
              "expressionValue"
            ]
          }
        ]
      },
      "Note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": "afa9-3d90aaa8da0f"
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Note_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Note_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": "Mr. N. Bene"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": "2020-11-20T08:00:00Z"
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": "This is important"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "NumberArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Number(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Number(s).",
                "items": {
                  "type": "number",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "NumberArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Number(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Number(s).",
                "items": {
                  "type": "number",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "NumberArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Number(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "A characteristic which value is an array of Number(s).",
                "items": {
                  "type": "number",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "NumberCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Number.",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "NumberCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Number.",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "NumberCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Number.",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "ObjectArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Object(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of characteristic values",
                "items": {
                  "type": "object",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "ObjectArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Object(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of characteristic values",
                "items": {
                  "type": "object",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "ObjectArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of Object(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of characteristic values",
                "items": {
                  "type": "object",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "ObjectCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Object.",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "ObjectCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Object.",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "ObjectCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a Object.",
            "properties": {
              "value": {
                "type": "object",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "OrderItemActionType": {
        "enum": [
          "add",
          "modify",
          "delete",
          "noChange"
        ],
        "type": "string",
        "description": "action to be performed on the product"
      },
      "PartyRef": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef_FVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRefOrPartyRoleRef_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PartyRoleRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRef_FVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRef_MVO": {
        "type": "object",
        "description": "A Party reference",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Party role reference. A party role represents the part played by a party in a given context.",
            "properties": {
              "partyId": {
                "type": "string",
                "description": "The identifier of the engaged party that is linked to the PartyRole object."
              },
              "partyName": {
                "type": "string",
                "description": "The name of the engaged party that is linked to the PartyRole object."
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Place": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRef": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation"
          },
          {
            "$ref": "#/components/schemas/GeographicSite"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress"
          },
          {
            "$ref": "#/components/schemas/PlaceRef"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSite_FVO"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress_FVO"
          },
          {
            "$ref": "#/components/schemas/PlaceRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Place entity and not the PlaceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/GeographicLocation_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicSite_MVO"
          },
          {
            "$ref": "#/components/schemas/GeographicAddress_MVO"
          },
          {
            "$ref": "#/components/schemas/PlaceRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRef_FVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "PlaceRef_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "Place_FVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "Place_MVO": {
        "type": "object",
        "description": "Place reference.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "discriminator": "@type"
      },
      "PolicyRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              },
              "topicRef": {
                "type": "string",
                "description": "A reference to the topic from which this entity can be fetched"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PolicyRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "PolicyRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "version": {
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "Quantity": {
        "type": "object",
        "description": "An amount in a given unit",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float",
            "default": 1,
            "description": "Numeric value in a given unit"
          },
          "units": {
            "type": "string",
            "description": "Unit"
          }
        }
      },
      "RdfXmlExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression"
          },
          {
            "type": "object",
            "description": "RdfXmlExpression is the ontology-encoded form of the Intent as RDF-XML as defined in https://www.w3.org/TR/rdf-syntax-grammar/",
            "properties": {
              "expressionValue": {
                "type": "string",
                "description": "RDF XML Expression value encoded object"
              }
            }
          }
        ]
      },
      "RdfXmlExpression_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression_FVO"
          },
          {
            "type": "object",
            "description": "RdfXmlExpression is the ontology-encoded form of the Intent as RDF-XML as defined in https://www.w3.org/TR/rdf-syntax-grammar/",
            "properties": {
              "expressionValue": {
                "type": "string",
                "description": "RDF XML Expression value encoded object"
              }
            },
            "required": [
              "expressionValue"
            ]
          }
        ]
      },
      "RdfXmlExpression_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression_MVO"
          },
          {
            "type": "object",
            "description": "RdfXmlExpression is the ontology-encoded form of the Intent as RDF-XML as defined in https://www.w3.org/TR/rdf-syntax-grammar/",
            "properties": {
              "expressionValue": {
                "type": "string",
                "description": "RDF XML Expression value encoded object"
              }
            },
            "required": [
              "expressionValue"
            ]
          }
        ]
      },
      "RelatedEntityRefOrValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance. A related entity defines a entity described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Entity and not the RelatedEntityRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "entity": {
                "$ref": "#/components/schemas/EntityRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedEntityRefOrValue_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance. A related entity defines a entity described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Entity and not the RelatedEntityRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "entity": {
                "$ref": "#/components/schemas/EntityRefOrValue_FVO"
              }
            },
            "required": [
              "role",
              "entity"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedEntityRefOrValue_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance. A related entity defines a entity described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Entity and not the RelatedEntityRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "entity": {
                "$ref": "#/components/schemas/EntityRefOrValue_MVO"
              }
            },
            "required": [
              "role",
              "entity"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef_FVO"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPartyRefOrPartyRoleRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "RelatedParty reference. A related party defines party or party role or its reference, linked to a specific entity",
            "properties": {
              "role": {
                "description": "Role played by the related party or party role in the context of the specific entity it is linked to. Such as 'initiator', 'customer',  'salesAgent', 'user'",
                "type": "string"
              },
              "partyOrPartyRole": {
                "$ref": "#/components/schemas/PartyRefOrPartyRoleRef_MVO"
              }
            },
            "required": [
              "role"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRefOrValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRefOrValue_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRefOrValue_FVO"
              }
            },
            "required": [
              "role",
              "place"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedPlaceRefOrValue_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "Entity reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the RelatedPlace entity and not the RelatedPlaceRefOrValue class itself",
            "properties": {
              "role": {
                "type": "string"
              },
              "place": {
                "$ref": "#/components/schemas/PlaceRefOrValue_MVO"
              }
            },
            "required": [
              "role",
              "place"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "RelatedServiceOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination.",
            "properties": {
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "serviceOrderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "serviceOrderId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "itemAction": {
                "$ref": "#/components/schemas/OrderItemActionType"
              },
              "itemId": {
                "type": "string",
                "description": "Identifier of the order item where the service was managed"
              },
              "role": {
                "type": "string",
                "description": "role of the service order item for this service"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "RelatedServiceOrderItem_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "description": "RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination.",
            "properties": {
              "@referredType": {
                "type": "string",
                "description": "The actual type of the target instance when needed for disambiguation."
              },
              "serviceOrderHref": {
                "type": "string",
                "description": "Reference of the related entity."
              },
              "serviceOrderId": {
                "type": "string",
                "description": "Unique identifier of a related entity."
              },
              "itemAction": {
                "$ref": "#/components/schemas/OrderItemActionType"
              },
              "itemId": {
                "type": "string",
                "description": "Identifier of the order item where the service was managed"
              },
              "role": {
                "type": "string",
                "description": "role of the service order item for this service"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRef": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRef_FVO": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "ResourceRef_MVO": {
        "type": "object",
        "description": "Resource reference, for when Resource is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "Service": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
            "properties": {
              "description": {
                "description": "Free-text description of the service",
                "type": "string"
              },
              "isServiceEnabled": {
                "type": "boolean",
                "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
              },
              "hasStarted": {
                "type": "boolean",
                "description": "If TRUE, this Service has already been started"
              },
              "startMode": {
                "type": "string",
                "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
              },
              "isStateful": {
                "type": "boolean",
                "description": "If TRUE, this Service can be changed without affecting any other services"
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the service starts"
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the service ends"
              },
              "serviceOrderItem": {
                "type": "array",
                "description": "A list of service order items related to this service",
                "items": {
                  "$ref": "#/components/schemas/RelatedServiceOrderItem"
                }
              },
              "note": {
                "type": "array",
                "description": "A list of notes made on this service",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              },
              "serviceType": {
                "description": "Business type of the service",
                "type": "string"
              },
              "isBundle": {
                "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf).",
                "type": "boolean"
              },
              "name": {
                "description": "Name of the service",
                "type": "string"
              },
              "category": {
                "type": "string",
                "description": "Is it a customer facing or resource facing service"
              },
              "feature": {
                "type": "array",
                "description": "A list of feature associated with this service ",
                "items": {
                  "$ref": "#/components/schemas/Feature"
                }
              },
              "relatedEntity": {
                "type": "array",
                "description": "A list of related entities in relationship with this service",
                "items": {
                  "$ref": "#/components/schemas/RelatedEntityRefOrValue"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "description": "A list of external identifiers assoicated with this service",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier"
                }
              },
              "serviceCharacteristic": {
                "type": "array",
                "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) ",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "serviceRelationship": {
                "type": "array",
                "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory.",
                "items": {
                  "$ref": "#/components/schemas/ServiceRelationship"
                }
              },
              "supportingService": {
                "type": "array",
                "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)",
                "items": {
                  "$ref": "#/components/schemas/ServiceRefOrValue"
                }
              },
              "supportingResource": {
                "type": "array",
                "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources",
                "items": {
                  "$ref": "#/components/schemas/ResourceRef"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef"
                }
              },
              "place": {
                "type": "array",
                "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRefOrValue"
                }
              },
              "state": {
                "$ref": "#/components/schemas/ServiceStateType"
              },
              "operatingStatus": {
                "$ref": "#/components/schemas/ServiceOperatingStatusType"
              },
              "serviceSpecification": {
                "$ref": "#/components/schemas/ServiceSpecificationRef"
              },
              "serviceDate": {
                "description": "Date when the service was created (whatever its status).",
                "type": "string"
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRefOrValue"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ServiceAttributeValueChangeEventPayload generic structure",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "ServiceCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceCreateEventPayload": {
        "type": "object",
        "description": "ServiceCreateEventPayload generic structure",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "ServiceDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceDeleteEventPayload": {
        "type": "object",
        "description": "ServiceDeleteEventPayload generic structure",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "ServiceOperatingStatusChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceOperatingStatusChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceOperatingStatusChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceOperatingStatusChangeEventPayload": {
        "type": "object",
        "description": "ServiceOperatingStatusChangeEventPayload generic structure",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "ServiceOperatingStatusType": {
        "enum": [
          "pending",
          "configured",
          "starting",
          "running",
          "degraded",
          "failed",
          "limited",
          "stopping",
          "stopped",
          "unknown"
        ],
        "type": "string",
        "description": "Valid values for the Operating status of the service"
      },
      "ServiceRef": {
        "type": "object",
        "description": "Service reference, for when Service is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRefOrValue": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the ServiceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Service"
          },
          {
            "$ref": "#/components/schemas/ServiceRef"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRefOrValue_FVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the ServiceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Service_FVO"
          },
          {
            "$ref": "#/components/schemas/ServiceRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRefOrValue_MVO": {
        "type": "object",
        "description": "The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the ServiceRefOrValue class itself",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Service_MVO"
          },
          {
            "$ref": "#/components/schemas/ServiceRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRef_FVO": {
        "type": "object",
        "description": "Service reference, for when Service is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRef_MVO": {
        "type": "object",
        "description": "Service reference, for when Service is used by other entities.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "serviceRelationshipCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "service": {
                "$ref": "#/components/schemas/ServiceRefOrValue"
              },
              "relationshipType": {
                "type": "string"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRelationship_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "properties": {
              "serviceRelationshipCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "service": {
                "$ref": "#/components/schemas/ServiceRefOrValue_FVO"
              },
              "relationshipType": {
                "type": "string"
              }
            },
            "required": [
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ServiceRelationship_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "type": "object",
            "properties": {
              "serviceRelationshipCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "service": {
                "$ref": "#/components/schemas/ServiceRefOrValue_MVO"
              },
              "relationshipType": {
                "type": "string"
              }
            },
            "required": [
              "relationshipType"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "ServiceSpecificationRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "type": "object",
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Service specification version"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceSpecificationRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef_FVO"
          },
          {
            "type": "object",
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Service specification version"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceSpecificationRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_MVO"
          },
          {
            "$ref": "#/components/schemas/EntityRef_MVO"
          },
          {
            "type": "object",
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
            "properties": {
              "version": {
                "type": "string",
                "description": "Service specification version"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ServiceStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ServiceStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "ServiceStateChangeEventPayload": {
        "type": "object",
        "description": "ServiceStateChangeEventPayload generic structure",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/Service"
          }
        }
      },
      "ServiceStateType": {
        "enum": [
          "feasibilityChecked",
          "designed",
          "reserved",
          "inactive",
          "active",
          "terminated",
          "suspended"
        ],
        "type": "string",
        "description": "Valid values for the lifecycle state of the service"
      },
      "Service_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
            "properties": {
              "description": {
                "description": "Free-text description of the service",
                "type": "string"
              },
              "isServiceEnabled": {
                "type": "boolean",
                "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
              },
              "hasStarted": {
                "type": "boolean",
                "description": "If TRUE, this Service has already been started"
              },
              "startMode": {
                "type": "string",
                "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
              },
              "isStateful": {
                "type": "boolean",
                "description": "If TRUE, this Service can be changed without affecting any other services"
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the service starts"
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the service ends"
              },
              "serviceOrderItem": {
                "type": "array",
                "description": "A list of service order items related to this service",
                "items": {
                  "$ref": "#/components/schemas/RelatedServiceOrderItem"
                }
              },
              "note": {
                "type": "array",
                "description": "A list of notes made on this service",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              },
              "serviceType": {
                "description": "Business type of the service",
                "type": "string"
              },
              "isBundle": {
                "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf).",
                "type": "boolean"
              },
              "name": {
                "description": "Name of the service",
                "type": "string"
              },
              "category": {
                "type": "string",
                "description": "Is it a customer facing or resource facing service"
              },
              "feature": {
                "type": "array",
                "description": "A list of feature associated with this service ",
                "items": {
                  "$ref": "#/components/schemas/Feature_FVO"
                }
              },
              "relatedEntity": {
                "type": "array",
                "description": "A list of related entities in relationship with this service",
                "items": {
                  "$ref": "#/components/schemas/RelatedEntityRefOrValue_FVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "description": "A list of external identifiers assoicated with this service",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_FVO"
                }
              },
              "serviceCharacteristic": {
                "type": "array",
                "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) ",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_FVO"
                }
              },
              "serviceRelationship": {
                "type": "array",
                "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory.",
                "items": {
                  "$ref": "#/components/schemas/ServiceRelationship_FVO"
                }
              },
              "supportingService": {
                "type": "array",
                "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)",
                "items": {
                  "$ref": "#/components/schemas/ServiceRefOrValue_FVO"
                }
              },
              "supportingResource": {
                "type": "array",
                "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources",
                "items": {
                  "$ref": "#/components/schemas/ResourceRef_FVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_FVO"
                }
              },
              "place": {
                "type": "array",
                "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRefOrValue_FVO"
                }
              },
              "state": {
                "$ref": "#/components/schemas/ServiceStateType"
              },
              "serviceSpecification": {
                "$ref": "#/components/schemas/ServiceSpecificationRef_FVO"
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRefOrValue_FVO"
              }
            },
            "required": [
              "state",
              "serviceSpecification"
            ]
          }
        ],
        "discriminator": "@type"
      },
      "Service_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
            "properties": {
              "description": {
                "description": "Free-text description of the service",
                "type": "string"
              },
              "isServiceEnabled": {
                "type": "boolean",
                "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
              },
              "hasStarted": {
                "type": "boolean",
                "description": "If TRUE, this Service has already been started"
              },
              "startMode": {
                "type": "string",
                "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
              },
              "isStateful": {
                "type": "boolean",
                "description": "If TRUE, this Service can be changed without affecting any other services"
              },
              "startDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the service starts"
              },
              "endDate": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the service ends"
              },
              "serviceOrderItem": {
                "type": "array",
                "description": "A list of service order items related to this service",
                "items": {
                  "$ref": "#/components/schemas/RelatedServiceOrderItem_MVO"
                }
              },
              "note": {
                "type": "array",
                "description": "A list of notes made on this service",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              },
              "serviceType": {
                "description": "Business type of the service",
                "type": "string"
              },
              "isBundle": {
                "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf).",
                "type": "boolean"
              },
              "name": {
                "description": "Name of the service",
                "type": "string"
              },
              "category": {
                "type": "string",
                "description": "Is it a customer facing or resource facing service"
              },
              "feature": {
                "type": "array",
                "description": "A list of feature associated with this service ",
                "items": {
                  "$ref": "#/components/schemas/Feature_MVO"
                }
              },
              "relatedEntity": {
                "type": "array",
                "description": "A list of related entities in relationship with this service",
                "items": {
                  "$ref": "#/components/schemas/RelatedEntityRefOrValue_MVO"
                }
              },
              "externalIdentifier": {
                "type": "array",
                "description": "A list of external identifiers assoicated with this service",
                "items": {
                  "$ref": "#/components/schemas/ExternalIdentifier_MVO"
                }
              },
              "serviceCharacteristic": {
                "type": "array",
                "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) ",
                "items": {
                  "$ref": "#/components/schemas/Characteristic_MVO"
                }
              },
              "serviceRelationship": {
                "type": "array",
                "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory.",
                "items": {
                  "$ref": "#/components/schemas/ServiceRelationship_MVO"
                }
              },
              "supportingService": {
                "type": "array",
                "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)",
                "items": {
                  "$ref": "#/components/schemas/ServiceRefOrValue_MVO"
                }
              },
              "supportingResource": {
                "type": "array",
                "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources",
                "items": {
                  "$ref": "#/components/schemas/ResourceRef_MVO"
                }
              },
              "relatedParty": {
                "type": "array",
                "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity",
                "items": {
                  "$ref": "#/components/schemas/RelatedPartyRefOrPartyRoleRef_MVO"
                }
              },
              "place": {
                "type": "array",
                "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)",
                "items": {
                  "$ref": "#/components/schemas/RelatedPlaceRefOrValue_MVO"
                }
              },
              "state": {
                "$ref": "#/components/schemas/ServiceStateType"
              },
              "operatingStatus": {
                "$ref": "#/components/schemas/ServiceOperatingStatusType"
              },
              "serviceSpecification": {
                "$ref": "#/components/schemas/ServiceSpecificationRef_MVO"
              },
              "intent": {
                "$ref": "#/components/schemas/IntentRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StandardIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StandardIdentifier_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "The corresponding identification of the resource in different standard, regulatory definitions. The standard specification identifier (e.g., ISO 3166-1 Alpha-2) and the corresponding value (e.g., BE) relevant to a particular resource. It is anticipated that multiple standards can provide definitions for a single entity, e.g., a country identifier can be specified in various standards (e.g., \"ISO 3166-1 Alpha 2\",  \"ISO 3166-1 Alpha 3\", \"ISO 3166-1 Numeric\")",
            "properties": {
              "format": {
                "type": "string",
                "description": "Standard/Regulatory definition identifier. e.g., ISO 3166-1",
                "example": "ISO 3166-1"
              },
              "value": {
                "type": "string",
                "description": "The value of the resource in the corresponding standard.e.g., a country code value",
                "example": "GB"
              }
            }
          }
        ],
        "discriminator": "@type"
      },
      "StringArrayCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of String(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of string characteristics",
                "items": {
                  "type": "string",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "StringArrayCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of String(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of string characteristics",
                "items": {
                  "type": "string",
                  "description": "Characteristic value"
                }
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "StringArrayCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is an array of String(s).",
            "properties": {
              "value": {
                "type": "array",
                "description": "Collection of string characteristics",
                "items": {
                  "type": "string",
                  "description": "Characteristic value"
                }
              }
            }
          }
        ]
      },
      "StringCharacteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a String.",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "StringCharacteristic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_FVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a String.",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "StringCharacteristic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Characteristic_MVO"
          },
          {
            "type": "object",
            "description": "A characteristic which value is a String.",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the characteristic"
              }
            }
          }
        ]
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "startDateTime": {
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "description": "End of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        }
      },
      "TurtleExpression": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression"
          },
          {
            "type": "object",
            "description": "TurtleExpression is the ontology-encoded form of the Intent as Turtle RDF",
            "properties": {
              "expressionValue": {
                "type": "string",
                "description": "Turtle Expression value is the ontology-encoded form of the Intent as Turtle RDF as defined in https://www.w3.org/TR/turtle/"
              }
            }
          }
        ]
      },
      "TurtleExpression_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression_FVO"
          },
          {
            "type": "object",
            "description": "TurtleExpression is the ontology-encoded form of the Intent as Turtle RDF",
            "properties": {
              "expressionValue": {
                "type": "string",
                "description": "Turtle Expression value is the ontology-encoded form of the Intent as Turtle RDF as defined in https://www.w3.org/TR/turtle/"
              }
            },
            "required": [
              "expressionValue"
            ]
          }
        ]
      },
      "TurtleExpression_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntentExpression_MVO"
          },
          {
            "type": "object",
            "description": "TurtleExpression is the ontology-encoded form of the Intent as Turtle RDF",
            "properties": {
              "expressionValue": {
                "type": "string",
                "description": "Turtle Expression value is the ontology-encoded form of the Intent as Turtle RDF as defined in https://www.w3.org/TR/turtle/"
              }
            },
            "required": [
              "expressionValue"
            ]
          }
        ]
      },
      "common": {
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/common"
            }
          ]
        },
        "properties": {
          "@id": {
            "description": "Used to uniquely identify things that are being described in the document with IRIs or blank node identifiers.",
            "type": "string",
            "format": "uri"
          },
          "@value": {
            "description": "Used to specify the data that is associated with a particular property in the graph.",
            "type": "string"
          },
          "@language": {
            "description": "Used to specify the language for a particular string value or the default language of a JSON-LD document.",
            "type": "string"
          },
          "@type": {
            "description": "Used to set the data type of a node or typed value.",
            "type": "string"
          },
          "@container": {
            "description": "Used to set the default container type for a term.",
            "type": "string",
            "enum": [
              "@language",
              "@list",
              "@index",
              "@set"
            ]
          },
          "@list": {
            "description": "Used to express an ordered set of data."
          },
          "@set": {
            "description": "Used to express an unordered set of data and to ensure that values are always represented as arrays."
          },
          "@reverse": {
            "description": "Used to express reverse properties.",
            "type": "string",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/common"
                }
              ]
            }
          },
          "@base": {
            "description": "Used to set the base IRI against which relative IRIs are resolved",
            "type": "string",
            "format": "uri"
          },
          "@vocab": {
            "description": "Used to expand properties and values in @type with a common prefix IRI",
            "type": "string",
            "format": "uri"
          }
        },
        "discriminator": "@type"
      },
      "common_MVO": {
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/common_MVO"
            }
          ]
        },
        "properties": {
          "@id": {
            "description": "Used to uniquely identify things that are being described in the document with IRIs or blank node identifiers.",
            "type": "string",
            "format": "uri"
          },
          "@value": {
            "description": "Used to specify the data that is associated with a particular property in the graph.",
            "type": "string"
          },
          "@language": {
            "description": "Used to specify the language for a particular string value or the default language of a JSON-LD document.",
            "type": "string"
          },
          "@container": {
            "description": "Used to set the default container type for a term.",
            "type": "string",
            "enum": [
              "@language",
              "@list",
              "@index",
              "@set"
            ]
          },
          "@list": {
            "description": "Used to express an ordered set of data."
          },
          "@set": {
            "description": "Used to express an unordered set of data and to ensure that values are always represented as arrays."
          },
          "@reverse": {
            "description": "Used to express reverse properties.",
            "type": "string",
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/common_MVO"
                }
              ]
            }
          },
          "@base": {
            "description": "Used to set the base IRI against which relative IRIs are resolved",
            "type": "string",
            "format": "uri"
          },
          "@vocab": {
            "description": "Used to expand properties and values in @type with a common prefix IRI",
            "type": "string",
            "format": "uri"
          }
        },
        "discriminator": "@type"
      },
      "context": {
        "additionalProperties": true,
        "properties": {
          "@context": {
            "description": "Used to define the short-hand names that are used throughout a JSON-LD document.",
            "type": "object"
          }
        },
        "discriminator": "@type"
      },
      "context_MVO": {
        "additionalProperties": true,
        "properties": {
          "@context": {
            "description": "Used to define the short-hand names that are used throughout a JSON-LD document.",
            "type": "object"
          }
        },
        "discriminator": "@type"
      },
      "graph": {
        "additionalProperties": true,
        "properties": {
          "@graph": {
            "description": "Used to express a graph.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common"
            }
          }
        },
        "discriminator": "@type"
      },
      "graph_MVO": {
        "additionalProperties": true,
        "properties": {
          "@graph": {
            "description": "Used to express a graph.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/common_MVO"
            }
          }
        },
        "discriminator": "@type"
      },
      "Error": {
        "discriminator": "@type",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      },
      "ServiceNotificationPayload": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ServiceAttributeValueChangeEvent"
          },
          {
            "$ref": "#/components/schemas/ServiceCreateEvent"
          },
          {
            "$ref": "#/components/schemas/ServiceDeleteEvent"
          },
          {
            "$ref": "#/components/schemas/ServiceOperatingStatusChangeEvent"
          },
          {
            "$ref": "#/components/schemas/ServiceStateChangeEvent"
          }
        ]
      }
    },
    "messages": {
      "ListServiceRequest": {
        "name": "ListServiceRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/ListServiceRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200ServiceArrayJsonReply": {
        "name": "200ServiceArrayJsonReply",
        "payload": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Service"
          }
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/XTotalCountHeader"
            },
            {
              "$ref": "#/components/schemas/XResultCountHeader"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "400JsonReply": {
        "name": "400JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode400Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "401JsonReply": {
        "name": "401JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode401Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "403JsonReply": {
        "name": "403JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode403Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "404JsonReply": {
        "name": "404JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode404Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "405JsonReply": {
        "name": "405JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode405Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "500JsonReply": {
        "name": "500JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode500Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "501JsonReply": {
        "name": "501JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode501Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "503JsonReply": {
        "name": "503JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode503Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "CreateServiceJsonRequest": {
        "name": "CreateServiceJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/Service_FVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/CreateServiceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "201ServiceJsonReply": {
        "name": "201ServiceJsonReply",
        "payload": {
          "$ref": "#/components/schemas/Service"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode201Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "409JsonReply": {
        "name": "409JsonReply",
        "payload": {
          "$ref": "#/components/schemas/Error"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode409Header"
            }
          ]
        },
        "contentType": "application/json"
      },
      "RetrieveServiceRequest": {
        "name": "RetrieveServiceRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/RetrieveServiceRequestParametersHeader"
            },
            {
              "$ref": "#/components/schemas/QueryFiltersHeader"
            }
          ]
        }
      },
      "200Service_GetJsonReply": {
        "name": "200Service_GetJsonReply",
        "payload": {
          "$ref": "#/components/schemas/Service"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchServiceJsonRequest": {
        "name": "PatchServiceJsonRequest",
        "payload": {
          "$ref": "#/components/schemas/Service_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchServiceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json"
      },
      "PatchServiceMergePatchRequest": {
        "name": "PatchServiceMergePatchRequest",
        "payload": {
          "$ref": "#/components/schemas/Service_MVO"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchServiceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "PatchServiceJsonPatchRequest": {
        "name": "PatchServiceJsonPatchRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchServiceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "PatchServiceJsonPatchQueryRequest": {
        "name": "PatchServiceJsonPatchQueryRequest",
        "payload": {
          "$ref": "#/components/schemas/JsonPatchOperations"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/PatchServiceRequestParametersHeader"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "200Service_PatchJsonReply": {
        "name": "200Service_PatchJsonReply",
        "payload": {
          "$ref": "#/components/schemas/Service"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json"
      },
      "200Service_PatchMergePatchReply": {
        "name": "200Service_PatchMergePatchReply",
        "payload": {
          "$ref": "#/components/schemas/Service"
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/merge-patch+json"
      },
      "200Service_PatchJsonPatchReply": {
        "name": "200Service_PatchJsonPatchReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Service"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Service"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch+json"
      },
      "200Service_PatchJsonPatchQueryReply": {
        "name": "200Service_PatchJsonPatchQueryReply",
        "payload": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Service"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Service"
              }
            },
            {
              "type": "string",
              "nullable": true
            }
          ]
        },
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode200Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        },
        "contentType": "application/json-patch-query+json"
      },
      "DeleteServiceRequest": {
        "name": "DeleteServiceRequest",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RequestHeaders"
            },
            {
              "$ref": "#/components/schemas/DeleteServiceRequestParametersHeader"
            }
          ]
        }
      },
      "204Reply": {
        "name": "204Reply",
        "headers": {
          "allOf": [
            {
              "$ref": "#/components/schemas/CorrelationHeader"
            },
            {
              "$ref": "#/components/schemas/StatusCode204Header"
            },
            {
              "$ref": "#/components/schemas/RequestChannel"
            }
          ]
        }
      },
      "ServiceNotification": {
        "name": "ServiceNotification",
        "payload": {
          "$ref": "#/components/schemas/ServiceNotificationPayload"
        }
      }
    }
  },
  "defaultContentType": "application/json"
}